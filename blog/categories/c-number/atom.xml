<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | Zac Gross]]></title>
  <link href="http://zacg.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://zacg.github.io/"/>
  <updated>2014-03-27T03:13:25-04:00</updated>
  <id>http://zacg.github.io/</id>
  <author>
    <name><![CDATA[Zac Gross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Log4Net Appender]]></title>
    <link href="http://zacg.github.io/blog/2014/02/05/azure-log4net-appender/"/>
    <updated>2014-02-05T01:28:00-05:00</updated>
    <id>http://zacg.github.io/blog/2014/02/05/azure-log4net-appender</id>
    <content type="html"><![CDATA[<p>
    Recently when deploying an existing codebase to Azure I required the ability to configure log4net to write to azure storage services. 
</p>




<p>
    After some quick googling I found a NuGet package that seemed to be fairly well maintained and had a modest amount of users according to the NuGet download stats. NuGet Package here: <a href="http://www.nuget.org/packages/log4net.Appender.Azure/">http://www.nuget.org/packages/log4net.Appender.Azure/</a> or type the following in package manager console:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'> <span class="n">Install</span><span class="p">-</span><span class="n">Package</span> <span class="n">log4net</span><span class="p">.</span><span class="n">Appender</span><span class="p">.</span><span class="n">Azure</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
    However I immediately ran into a few issues, first problems building it with my project as it was built with dependencies on older frameworks such as log4net. Additionally when running the table appender in a real application with multiple concurrent loggers I began to get errors related to the way it submitted batch inserts to the storage service.
</p>




<p>
    I was able to fork the NuGet project on github, update it's dependencies, and fix the batch processing issue, you can find my branch here: <a href="https://github.com/zacg/log4net.Azure">https://github.com/zacg/log4net.Azure</a> I have submitted a pull request for these changes, hopefully they will appear in the next NuGet package release.
</p>




<p>
    Once referenced just choose your preferred storage method and set your connection string like so:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Azure Appender Config Example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;log4net&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>appender name=&quot;TableAppender&quot; type=&quot;log4net.Appender.AzureTableAppender, log4net.Appender.Azure&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>param name=&quot;TableName&quot; value=&quot;testLoggingTable&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>param name=&quot;ConnectionString&quot; value=&quot;UseDevelopmentStorage=true&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>layout type=&quot;log4net.Layout.PatternLayout&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>conversionPattern value=&quot;%date [%thread] %-5level %logger [%property{NDC}] - %message%newline&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/layout<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/appender<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>appender name=&quot;BlobAppender&quot; type=&quot;log4net.Appender.AzureBlobAppender, log4net.Appender.Azure&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>param name=&quot;ContainerName&quot; value=&quot;testloggingblob&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>param name=&quot;DirectoryName&quot; value=&quot;logs&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>param name=&quot;ConnectionString&quot; value=&quot;UseDevelopmentStorage=true&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>layout type=&quot;log4net.Layout.PatternLayout&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>conversionPattern value=&quot;%date [%thread] %-5level %logger [%property{NDC}] - %message%newline&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/layout<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/appender<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>root<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>level value=&quot;INFO&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>appender-ref ref=&quot;TableAppender&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>appender-ref ref=&quot;BlobAppender&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/root<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/log4net&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
    If you ever have to debug log4net appenders here are a few snippets that may help you. The first is a function to flush the log buffers. The second turns on log4net debug logging, it will log to system.diagnostic.trace, just place the app setting in your config file. And the last snippet is just a setting to write your trace logs to file, again place in your config file.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Flush Buffers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">//From: Alconja @ http://stackoverflow.com/questions/2045935/is-there-anyway-to-programmably-flush-the-buffer-in-log4net</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">FlushBuffers</span><span class="p">()</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">ILoggerRepository</span> <span class="n">rep</span> <span class="p">=</span> <span class="n">LogManager</span><span class="p">.</span><span class="n">GetRepository</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="n">IAppender</span> <span class="n">appender</span> <span class="k">in</span> <span class="n">rep</span><span class="p">.</span><span class="n">GetAppenders</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">buffered</span> <span class="p">=</span> <span class="n">appender</span> <span class="k">as</span> <span class="n">BufferingAppenderSkeleton</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">buffered</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">buffered</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Log log4net Debugging Info </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>appSettings<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>add key=&quot;log4net.Internal.Debug&quot; value=&quot;true&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/appSettings<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dump Trace Logs to File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="ni">&amp;lt;</span>system.diagnostics&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>trace<span class="ni">&amp;gt;</span>
</span><span class='line'> <span class="ni">&amp;lt;</span>listeners<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>add
</span><span class='line'>   name=&quot;textWriterTraceListener&quot;
</span><span class='line'>   type=&quot;System.Diagnostics.TextWriterTraceListener&quot;
</span><span class='line'>   initializeData=&quot;C:\dev\log4net.txt&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'> <span class="ni">&amp;lt;</span>/listeners<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/trace<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>/system.diagnostics&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
    And finally a list of the errors encountered and fixed to help out random googlers.
    <ul>
        <li>Could not load file or assembly 'log4net, Version=1.2.12.0, Culture=neutral, PublicKeyToken=669e0ddf0bb1aa2a' or one of its dependencies.</li>
        <li>WRN: Comparing the assembly name resulted in the mismatch: Build Number</li>
        <li>All entities in a single batch operation must have the same partition key</li>
    </ul>
</p>




<p>
    I ran into a few roadblocks along the way but ended up with a working log4net appender that can write logs to Azure storage services with a few simple configuration settings. If you have any comments feel free to share below.
</p>


<p>
  Source Code Here: <a href="https://github.com/zacg/log4net.Azure">https://github.com/zacg/log4net.Azure</a>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File Parameter Support for Portable Restsharp Library]]></title>
    <link href="http://zacg.github.io/blog/2013/08/18/file-parameter-support-for-portable-restsharp-library/"/>
    <updated>2013-08-18T14:14:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/18/file-parameter-support-for-portable-restsharp-library</id>
    <content type="html"><![CDATA[<p>
    When developing mobile cross platform apps with Xamarin I like to keep as much common code as possible in a shared portable class library (PCL) for easy reuse. This includes any webservice calls and the associated boilerplate code. I have  been using a fork of the Restsharp library which has been modified to be PCL compliant. This strategy was working fine until recently when I needed to start uploading files through webservices. The Restsharp library has robust file upload support but because it is often tied to OS specific file operations it was left out of the PCL port. As a work around I simply imported the necessary file upload code from the original library using raw bytes and streams as interfaces rather than filenames. Leaving it up to the caller to implement the file loading in their native OS code.
</p>




<p>
My fork can be found on github at: <a href="https://github.com/zacg/geoserver-csharp">https://github.com/zacg/geoserver-csharp</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Simple Text List View Helper]]></title>
    <link href="http://zacg.github.io/blog/2013/08/18/xamarin-simple-text-list-view-helper/"/>
    <updated>2013-08-18T13:14:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/18/xamarin-simple-text-list-view-helper</id>
    <content type="html"><![CDATA[<p>
    Recently while working on an Xamarin based Android project I came up with a handy helper class for displaying basic list views. It saves alot of boilerplate code by not forcing a new adapter implementation for every domain object you want to use in a list view.
</p>


<p>
    The code:
</p>


<script src="https://gist.github.com/zacg/6262608.js"></script>




<p>
    And to use it:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">ListAdapter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SimpleTextAdapter</span><span class="p">&lt;</span><span class="n">SomeBusinessObject</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">objects</span><span class="p">,</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">item</span><span class="p">.</span><span class="n">Name</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
    Use it with a custom id field:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">ListAdapter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SimpleTextAdapter</span><span class="p">&lt;</span><span class="n">SomeBusinessObject</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">objects</span><span class="p">,</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">item</span><span class="p">.</span><span class="n">Name</span><span class="p">;},</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">item</span><span class="p">.</span><span class="n">CustomId</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jqGrid Inline Editing with asp.net MVC]]></title>
    <link href="http://zacg.github.io/blog/2013/06/01/inline-editing-for-jqgrid-with-asp-dot-net-mvc/"/>
    <updated>2013-06-01T13:54:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/06/01/inline-editing-for-jqgrid-with-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>
I am a frequent user of the popular jQuery plugin jqGrid. It comes with a large feature set for viewing and manipulating tabluar data in the browser. When I am working on an asp.net mvc projects I work with it via Robin van der Knaap's lightweight html helper library: <a href="https://github.com/robinvanderknaap/MvcJqGrid">https://github.com/robinvanderknaap/MvcJqGrid</a> . It has strongly typed html helpers and a handy model binder for handling async grid functions.
</p>




<p>
Recently I required jqGrid's <a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:inline_editing">inline editing feature</a> which is not supported in the MvcJqGrid library so via the power of github I went ahead and added it <a href="https://github.com/zacg/MvcJqGrid">https://github.com/zacg/MvcJqGrid</a>. 
</p>




<p>
The syntax follows the exisitng MvcJqGrid builder pattern and is very straightforward:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="err">@</span><span class="p">(</span><span class="n">Html</span><span class="p">.</span><span class="n">Grid</span><span class="p">(</span><span class="s">&quot;editing&quot;</span><span class="p">)&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;.</span><span class="n">SetCaption</span><span class="p">(</span><span class="s">&quot;Inline Editing&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;CustomerId&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetLabel</span><span class="p">(</span><span class="s">&quot;Id&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetCustomFormatter</span><span class="p">(</span><span class="s">&quot;buttonize&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="n">Formatters</span><span class="p">.</span><span class="n">Email</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">EditType</span><span class="p">.</span><span class="n">Text</span><span class="p">))</span>
</span><span class='line'><span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Company&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">MvcJqGrid</span><span class="p">.</span><span class="n">Enums</span><span class="p">.</span><span class="n">EditType</span><span class="p">.</span><span class="n">Select</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">SetEditOptions</span><span class="p">(</span><span class="k">new</span> <span class="n">EditOptions</span><span class="p">()</span> <span class="p">{</span> <span class="n">Value</span> <span class="p">=</span> <span class="s">&quot;0:Twitter; 1:Google; 2:Microsoft; 3:Cisco&quot;</span> <span class="p">}))</span>
</span><span class='line'><span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;EmailAddress&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="n">Formatters</span><span class="p">.</span><span class="n">Email</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">EditType</span><span class="p">.</span><span class="n">Text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetEditRules</span><span class="p">(</span><span class="k">new</span> <span class="n">EditRules</span><span class="p">()</span> <span class="p">{</span> <span class="n">Email</span> <span class="p">=</span> <span class="k">true</span> <span class="p">}))</span>
</span><span class='line'><span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Last Modified&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Telephone&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">.</span><span class="n">SetUrl</span><span class="p">(</span><span class="n">Url</span><span class="p">.</span><span class="n">Action</span><span class="p">(</span><span class="s">&quot;GridDataBasic&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">.</span><span class="n">SetAutoWidth</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">SetRowNum</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">SetRowList</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="m">10</span><span class="p">,</span> <span class="m">15</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">50</span> <span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="n">SetViewRecords</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">SetPager</span><span class="p">(</span><span class="s">&quot;pager&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">script</span> <span class="n">type</span><span class="p">=</span><span class="s">&quot;text/javascript&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="n">function</span> <span class="nf">buttonize</span><span class="p">(</span><span class="n">cellvalue</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">rowobject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="err">&#39;</span><span class="p">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="p">=</span><span class="s">&quot;button&quot;</span> <span class="k">value</span><span class="p">=</span><span class="s">&quot;Edit&quot;</span> <span class="n">onclick</span><span class="p">=</span><span class="s">&quot;edit(&#39; + options.rowId + &#39;)&quot;</span><span class="p">&gt;</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">function</span> <span class="nf">edit</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">$</span><span class="p">(</span><span class="s">&quot;#editing&quot;</span><span class="p">).</span><span class="n">jqGrid</span><span class="p">(</span><span class="s">&quot;editRow&quot;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I have submitted a pull request for my additions so it will become part of the core library shortly, if you can't wait that long just clone my fork here: <a href="https://github.com/zacg/MvcJqGrid">https://github.com/zacg/MvcJqGrid</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on C++ for C# developers]]></title>
    <link href="http://zacg.github.io/blog/2013/05/29/notes-on-c-plus-plus--for-c-number-developers/"/>
    <updated>2013-05-29T02:25:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/29/notes-on-c-plus-plus--for-c-number-developers</id>
    <content type="html"><![CDATA[<p>After primarily working in C# for the last 5 years I recently switched back to c++ for a large project. I am going to use this article to post notes/gotcha's/tips as a I come across them. I already have a few to add, and will update as I go along. Hopefully they help some c# programmers out there. They are listed in no particular order.</p>

<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">C++ does not support template type constraints/guards on template definitions</h3>
  </div>
  <div class="panel-body">
    <p>
Gotcha: C++ does not support template type constraints/guards on template definitions. I ended up using static asserts (requires c++ 11), the example shown below uses helper methods from the popular boost library.
    </p>
   
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>c# </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">class</span> <span class="nc">TestSuite</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">:</span>  <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">SomeType</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C++ </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">Case</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TestSuite</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'> <span class="n">BOOST_STATIC_ASSERT</span><span class="p">((</span><span class="n">boost</span><span class="o">::</span><span class="n">is_base_of</span><span class="o">&lt;</span><span class="n">ITestCase</span><span class="p">,</span> <span class="n">Case</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  </div>
 </div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">By default inheritance is private in c++</h3>
  </div>
  <div class="panel-body">


<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C# </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">class</span> <span class="nc">b</span>
</span><span class='line'>    <span class="p">:</span> <span class="k">class</span> <span class="nc">a</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Don't forget the "public" declaration if you are used to c#.</p>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C++ </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">b</span>
</span><span class='line'> <span class="o">:</span> <span class="k">public</span> <span class="k">class</span> <span class="nc">a</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Member access specified at group level</h3>
  </div>
  <div class="panel-body">

<p>Access identifier specified on each member.</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C#</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">SomeProp</span> <span class="p">{</span><span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">GetSomeOtherProp</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Access can be grouped.</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C++ </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">GetSomeProp</span><span class="p">();</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">GetSomeOtherProp</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">C++ supports multiple inheiritance</h3>
  </div>
  <div class="panel-body">
<p>
Unlike C#, C++ supports multiple inheiritance, while this may seem like a benifit it should be used very very rarely. If you find your object model requires multiple inheiritance it is best to reevaluate your design or you will end up facing issues like the <a href="http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem">diamond of death</a>.
</p>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Rule of 3</h3>
  </div>
  <div class="panel-body">
<p>
Remember the <a href="http://en.wikipedia.org/wiki/Rule_of_three_%28C++_programming%29">rule of 3</a>.

If you require any of the following then you should explicitly define all three.
<ul>
<li>copy constructor</li>
<li>copy assingment operator</li>
<li>destructor</li>
</ul>

</p>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Temproraries with Parameterless Constructors</h3>
  </div>
  <div class="panel-body">
    <p>
Don't include parathesis on paramaterless constructors the compiler will favour resolving it as a function declaration and you will end up with an error message like:

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">error:</span> <span class="n">request</span> <span class="k">for</span> <span class="n">member</span> <span class="err">&#39;</span><span class="n">method</span><span class="err">&#39;</span> <span class="n">in</span> <span class="err">&#39;</span><span class="n">someObj</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">which</span> <span class="n">is</span> <span class="n">of</span> <span class="n">non</span><span class="o">-</span><span class="k">class</span> <span class="nc">type</span> <span class="err">&#39;</span><span class="n">someType</span><span class="p">()</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Parthensis can still be used when using the "new" keyword

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//bad</span>
</span><span class='line'><span class="n">someObj</span> <span class="n">obj</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//good</span>
</span><span class='line'><span class="n">someObj</span> <span class="n">obj</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

</p>

</div>
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">STL containers copy their values.</h3>
  </div>
  <div class="panel-body">
    <p>
        When adding items to STL containters remember the container does a copy and keeps track of it's own copy of the item being added.
    </p>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Follow the Virtual Constructor Idiom</h3>
  </div>
  <div class="panel-body">
<p>
    When creating abstract base classes follow the  <a href="http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Virtual_Constructor">virtual constructor idiom</a>
    and create virtual clone and create methods.

    This allows you to create collections of base types while still being able to copy them without knowing their concrete type.
</p>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Dynamic Linking Libraries</h3>
  </div>
  <div class="panel-body">
  <p>
    Here are some tips and tools for working with dynamically linked libraries and shared objects.
  </p>
  <ul>
    <li>Shared library files to be registered must start with "lib"</li>
    <li>Use ldconfig -v to see registered libraries</li>
    <li>Use ldconfig to reload linked libraries</li>
    <li>Export ldpath to temporarily point executable at your lib, handy for scripting.</li>
    <li>Use ldd command to view an executables dependencies.</li>
    <li>Use nm --demangle <some.so> to view shared objects exported symbol list.</li>
  </ul>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Can't call virtual methods from constructor</h3>
  </div>
  <div class="panel-body">
    Virtual methods can't be called from within constructors. This usually means you have to use a two stage approach to initialization of derived classes.
  
  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Avoid importing namespaces</h3>
  </div>
  <div class="panel-body">
    It is bad practice to use "using namespace <...>;". When including third party libraries there can be naming conflicts which become a pain to track down in a large project.
  </div>
  
</div>



]]></content>
  </entry>
  
</feed>
