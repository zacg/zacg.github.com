<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zac Gross]]></title>
  <link href="http://zacg.github.io/atom.xml" rel="self"/>
  <link href="http://zacg.github.io/"/>
  <updated>2013-11-01T02:17:09-04:00</updated>
  <id>http://zacg.github.io/</id>
  <author>
    <name><![CDATA[Zac Gross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Golang Type Comparisons and Struct Initialization Using Reflection]]></title>
    <link href="http://zacg.github.io/blog/2013/10/11/golang-type-comparisons-using-reflection/"/>
    <updated>2013-10-11T19:29:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/10/11/golang-type-comparisons-using-reflection</id>
    <content type="html"><![CDATA[<p>
While writing some basic <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> code for a recent project, I decided to create a base struct containing the redundant fields for all of my data entities (id,date_created, etc&#8230;). I then embedded this struct in all data entites and tagged it as inline so json/bson marshalers would treat it accordingly. A problem arose when I wanted to pass newly created data entities from clients into a json webservice. Normally when instantiating a data entity struct I would use the associated creation method (NewSomeEntity()) which would set the appropriate id/created date etc&#8230; however the json marshaler is not smart enough to do this as it builds the object graph. If the object graph is only one level deep, you can just run an init function on the new object returned from the marshaler, when the object contains n-levels (n-many relationships) it becomes a problem.
</p>


<p>
I had two options: I could implement custom marshal interfaces for every data entity struct, or I could write a function that reflects over the object graph after it has been built by the json marshaler and run my intitalization function against any new/unintitalized base entity structs. I decided to go with the later option.
</p>




<p>
Thre are a few key functions needed to achieve the method described above, mainly: reflecting over an object to get a list of it&#8217;s fields, checking the type of the reflected field against your base struct, , checking if the reflected field value is uninitialized or in the case of a pointer nil, and finally setting the value of an empty field to an initialized struct. 
</p>




<p>
Here are some code examples:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>  <span class="c1">//base struct for all data entities</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">Entity</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Id</span>        <span class="nx">Uuid</span> <span class="s">`bson:&quot;_id,omitempty&quot; json:id`</span>
</span><span class='line'>      <span class="nx">CreatedOn</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//initialization function</span>
</span><span class='line'> <span class="kd">func</span> <span class="nx">NewEntity</span><span class="p">()</span> <span class="nx">Entity</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Entity</span><span class="p">{</span><span class="nx">CreatedOn</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">(),</span> <span class="nx">Id</span><span class="p">:</span> <span class="nx">Uuid</span><span class="p">.</span><span class="nx">NewUuid</span><span class="p">()}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Reflect over object and get list of fields
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">obj</span> <span class="o">:=</span> <span class="nx">Entity</span><span class="p">{};</span>
</span><span class='line'><span class="c1">//retrieve list of fields</span>
</span><span class='line'><span class="nx">r</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">ValueOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">Elem</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//iterate over fields</span>
</span><span class='line'><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">NumField</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">f</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Field</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Compare reflected type
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">Type</span><span class="p">()</span> <span class="o">==</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">TypeOf</span><span class="p">(</span><span class="nx">Entity</span><span class="p">{}))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//reflected type is of type &quot;Entity&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Checking for uninitialized/empty struct
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">Interface</span><span class="p">().(</span><span class="nx">Entity</span><span class="p">)</span> <span class="o">==</span> <span class="nx">Entity</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//reflected field is an uninitialized entity struct</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Checking for nil pointer - if you are using pointers you may need to check for a nil pointer rather than an uninitialized struct.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">Kind</span><span class="p">()</span> <span class="o">==</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Pointer</span> <span class="o">&amp;&amp;</span> <span class="nx">f</span><span class="p">.</span><span class="nx">IsNil</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//reflected field is a null pointer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Finally once an empty field is found set it to an initialized Entity struct
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">//sets field f to an initialized Entity struct</span>
</span><span class='line'><span class="nx">f</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">ValueOf</span><span class="p">(</span><span class="nx">NewEntity</span><span class="p">()))</span>
</span></code></pre></td></tr></table></div></figure>




<p>
With the above snippets you can easily build a custom function for iterating over your object graph and initialize empty structs.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beware when Installing Swig from Debian Package]]></title>
    <link href="http://zacg.github.io/blog/2013/09/01/beware-when-installing-swig-from-debian-package/"/>
    <updated>2013-09-01T22:52:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/09/01/beware-when-installing-swig-from-debian-package</id>
    <content type="html"><![CDATA[<p>
Recently while generating Go bindings for a C++ library with Swig I begain noticing memory issues. Specifically when memory pressure was placed on the application I noticed output paramaters of standard types like std::vector were being randomly deallocated. After triple checking my Swig template files for the correct wrapping signatures and reviewing the generated Go and C/C++ code I was at a loss.
</p>




<p>
 After reviewing the Swig project commit log and noticing some fixes for Go related issues, I remembered I had installed Swig from the debian aptitude manager. Sure enough after running &#8220;swig -version&#8221; my swig version was at 2.0.7 (the current version at this time of writing was 2.0.10). 2.0.7 lacks many bug fixes related to Go. Downloading and installing 2.0.10 from the Swig website solved my memory issues.
</p>




<p>
<strong>Solution:</strong>
</p>




<ol>
    <li>
        Check Installed Swig version
        
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>     swig -version
</span><span class='line'>      
</span></code></pre></td></tr></table></div></figure>

    </li>
    <li>
        If version is < latest: unistall packaged version, then download and install current release from the website: <a href="http://swig.org">http://swig.org</a>
    </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File Parameter Support for Portable Restsharp Library]]></title>
    <link href="http://zacg.github.io/blog/2013/08/18/file-parameter-support-for-portable-restsharp-library/"/>
    <updated>2013-08-18T14:14:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/18/file-parameter-support-for-portable-restsharp-library</id>
    <content type="html"><![CDATA[<p>
    When developing mobile cross platform apps with Xamarin I like to keep as much common code as possible in a shared portable class library (PCL) for easy reuse. This includes any webservice calls and the associated boilerplate code. I have  been using a fork of the Restsharp library which has been modified to be PCL compliant. This strategy was working fine until recently when I needed to start uploading files through webservices. The Restsharp library has robust file upload support but because it is often tied to OS specific file operations it was left out of the PCL port. As a work around I simply imported the necessary file upload code from the original library using raw bytes and streams as interfaces rather than filenames. Leaving it up to the caller to implement the file loading in their native OS code.
</p>




<p>
My fork can be found on github at: <a href="https://github.com/zacg/geoserver-csharp">https://github.com/zacg/geoserver-csharp</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Simple Text List View Helper]]></title>
    <link href="http://zacg.github.io/blog/2013/08/18/xamarin-simple-text-list-view-helper/"/>
    <updated>2013-08-18T13:14:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/18/xamarin-simple-text-list-view-helper</id>
    <content type="html"><![CDATA[<p>
    Recently while working on an Xamarin based Android project I came up with a handy helper class for displaying basic list views. It saves alot of boilerplate code by not forcing a new adapter implementation for every domain object you want to use in a list view.
</p>


<p>
    The code:
</p>


<script src="https://gist.github.com/zacg/6262608.js"></script>




<p>
    And to use it:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">ListAdapter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SimpleTextAdapter</span><span class="p">&lt;</span><span class="n">SomeBusinessObject</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">objects</span><span class="p">,</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">item</span><span class="p">.</span><span class="n">Name</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Use it with a custom id field:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">ListAdapter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SimpleTextAdapter</span><span class="p">&lt;</span><span class="n">SomeBusinessObject</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">objects</span><span class="p">,</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">item</span><span class="p">.</span><span class="n">Name</span><span class="p">;},</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">item</span><span class="p">.</span><span class="n">CustomId</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Qt Creator Build Commands as Sudo]]></title>
    <link href="http://zacg.github.io/blog/2013/08/07/running-qt-creator-build-commands-as-sudo/"/>
    <updated>2013-08-07T20:00:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/07/running-qt-creator-build-commands-as-sudo</id>
    <content type="html"><![CDATA[<p>
    Recently I had a requirement to install a shared library as a build/deployment step in a QtCreator project, which of course required sudo permissions. Not surprisingly Qt Creator does not simply let you prepend &#8220;sudo&#8221; to a custom build step, here is the workaround I found:
</p>




<p>
First I moved all the commands that needed to run with sudo into a single make file like the following, mine was called InstallLib.make:
</p>




<figure class='code'><figcaption><span>InstallLib.make </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>install:
</span><span class='line'>  @echo <span class="s2">&quot;Installing go shared lib...&quot;</span>
</span><span class='line'>  sudo cp -f libImgSearch.so.1.0.0 /usr/local/lib/
</span><span class='line'>  sudo cp -f libImgSearch.so.1.0 /usr/local/lib/
</span><span class='line'>  sudo cp -f libImgSearch.so.1 /usr/local/lib/
</span><span class='line'>  sudo cp -f libImgSearch.so /usr/local/lib/
</span><span class='line'>  sudo ldconfig
</span></code></pre></td></tr></table></div></figure>




<p>
    Next in Qt Creator with your project open, goto the project section, add a new &#8220;custom process&#8221; build step. In the command field type: &#8220;ssh-askpass&#8221; this program will popup a widget to enter the sudo password when executed. In the build step arguments field enter: &#8220;Sudo Password | sudo -S make -f InstallLib.make&#8221;. This will make the ssh-askpass program execute the &#8220;InstalledLib.make&#8221; make file when a correct sudo password is provided.
</p>




<p>
If you prefer not to use the GUI, you could also edit your projects .user file and add some xml similar to the following:
</p>




<figure class='code'><figcaption><span>project.user </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   &lt;valuemap <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QVariantMap&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.BuildStepList.Step.10&quot;</span>&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;bool&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.BuildStep.Enabled&quot;</span>&gt;true&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProcessStep.Arguments&quot;</span>&gt;Sudo Password | sudo -S make -f InstallLib.make&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProcessStep.Command&quot;</span>&gt;ssh-askpass&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProcessStep.WorkingDirectory&quot;</span>&gt;%<span class="o">{</span>buildDir<span class="o">}</span>&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProjectConfiguration.DefaultDisplayName&quot;</span>&gt;Custom Process Step&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProjectConfiguration.DisplayName&quot;</span>&gt;&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProjectConfiguration.Id&quot;</span>&gt;ProjectExplorer.ProcessStep&lt;/value&gt;
</span><span class='line'>     &lt;/valuemap&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Combinations in Javascript]]></title>
    <link href="http://zacg.github.io/blog/2013/08/02/binary-combinations-in-javascript/"/>
    <updated>2013-08-02T09:16:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/02/binary-combinations-in-javascript</id>
    <content type="html"><![CDATA[<p>
While writing test coverage for a recent javascript project I was required to test every possible call to a function with a large number of binary parameters. Here is the function I came up with to generate the combinations:
</p>




<script src="https://gist.github.com/zacg/6139955.js"></script>




<p>
It&#8217;s pretty straight forward, pass in the length (n) of binary digits and it will return an array of all possible combinations as boolean values.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lowercase JSON Fields with Golang]]></title>
    <link href="http://zacg.github.io/blog/2013/07/31/lowercase-json-fields-with-golang/"/>
    <updated>2013-07-31T14:19:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/07/31/lowercase-json-fields-with-golang</id>
    <content type="html"><![CDATA[<p>
    The base GO libraries provide a handy function for marshaling structs into JSON. I recently came across an issue when writing webservices in GO for an existing javascript client. The problem was the client expected the JSON data to have field names starting with lowercase letters. GO&#8217;s naming convention is obviously going to make all struct fields uppercase by default as they need to be exported. I ended up copying the JSON marshaler code from GO&#8217;s library and modifiying it with a new paramater that will lowercase JSON field names when set. Because GO isn&#8217;t on github and I am strapped for time I just copied the code into a new util namespace and made the modifications as a couple of other gophers in #go-nuts were interested in using it.
</p>




<p>
Usage is simple, when the 2nd paramater is set to true, all fieldnames will start with a lowercase letter(other capitalization remains unchanged):
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">jsonutils</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(&lt;</span><span class="nx">some</span> <span class="nx">obj</span><span class="p">&gt;,</span> <span class="p">&lt;</span><span class="nx">lowercase</span> <span class="nx">fieldnames</span><span class="p">:</span><span class="kc">true</span><span class="o">/</span><span class="kc">false</span><span class="p">&gt;)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
The source code can be downloaded from github: <a href="https://github.com/zacg/goutils">https://github.com/zacg/goutils</a>
</p>




<p>And here is some boilerplate code to use it in a Revel controller:</p>




<div><script src='https://gist.github.com/6124880.js'></script>
<noscript><pre><code></code></pre></noscript></div>




<p>

</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calling C++ code from Go with SWIG]]></title>
    <link href="http://zacg.github.io/blog/2013/06/06/calling-c-plus-plus-code-from-go-with-swig/"/>
    <updated>2013-06-06T22:51:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/06/06/calling-c-plus-plus-code-from-go-with-swig</id>
    <content type="html"><![CDATA[<p>

 Recently while working on a Go based project I needed to use some functionality from another large C++ library. The librarys size and complexity made re-writing it in Go unfeasible. After some research I decided to use the popular SWIG (Simplified Wrapper and Interface Generator) framework to enable interop between my two projects.  

</p>




<p>
The following is a brief tutorial to guide you through configuring SWIG with Go.
</p>




<p>
Start by installing GO and SWIG if not already installed
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install golang
</span><span class='line'>sudo apt-get install swig
</span></code></pre></td></tr></table></div></figure>




<div class="alert alert-danger">
<p>
<strong>Update:</strong> The debian package is out of date and lacking many go related fixes, it is best to install current SWIG release from SWIG website: <a href="http://swig.org">http://swig.org</a>
</p>
<p>
    I also recommend installing golang from source as some of the following commands only work with go 1.1 and up. <a href="http://golang.org/doc/install/source">http://golang.org/doc/install/source</a>
</p>
</div>




<p>
Once everything in installed the first step is to define a module file which will tell the SWIG tool what code in the C++ project to expose in the resulting GO package. We&#8217;ll assume your project is object oriented with cpp/header files for each class, when this is the case we can just include the desired header files in our SWIG module.
</p>




<p>
 We will pretend our C++ project is a dynamically linked shared library called &#8220;simplelib&#8221; and contains the following files:
<p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>simpleclass.h
</span><span class='line'>simpleclass.cpp
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>
We will add a module file called <i>simplelib.swig</i>. Inside we include the simpleclass.h header, this will instruct the SWIG tool to generate wrapping code for this class allowing us to use it in GO.
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">%</span><span class="n">module</span> <span class="n">simplelib</span>  <span class="c1">//name of the resulting GO package</span>
</span><span class='line'><span class="o">%</span><span class="p">{</span>
</span><span class='line'><span class="cp">#include &quot;simpleclass.h&quot;</span>
</span><span class='line'><span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="s">&quot;simpleclass.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
If your wrapped class(es) are simple and use primitive types the above swig file should suffice, SWIG will translate the following primitive types to the specified Go types
</p>

<table summary="Go primitive type mappings" class="table">
<tr>
<th>C/C++ type</th>
<th>Go type</th>
</tr>

<tr>
<td>bool</td>
<td>bool</td>
</tr>

<tr>
<td>char</td>
<td>byte</td>
</tr>

<tr>
<td>signed char</td>
<td>int8</td>
</tr>

<tr>
<td>unsigned char</td>
<td>byte</td>
</tr>

<tr>
<td>short</td>
<td>int16</td>
</tr>

<tr>
<td>unsigned short</td>
<td>uint16</td>
</tr>

<tr>
<td>int</td>
<td>int</td>
</tr>

<tr>
<td>unsigned int</td>
<td>uint</td>
</tr>

<tr>
<td>long</td>
<td>int32 or int64, depending on <tt>-long-type-size</tt></td>
</tr>

<tr>
<td>unsigned long</td>
<td>uint32 or uint64, depending on <tt>-long-type-size</tt></td>
</tr>

<tr>
<td>long long</td>
<td>int64</td>
</tr>

<tr>
<td>unsigned long long</td>
<td>uint64</td>
</tr>

<tr>
<td>float</td>
<td>float32</td>
</tr>

<tr>
<td>double</td>
<td>float64</td>
</tr>

<tr>
<td>char *<br>char []</td>
<td>string</td>
</tr>

</table>

<br/>

<p>
If your target code contains non-primitive types you have a bit more work todo. SWIG includes headers to help with common non primitive types like string and vector from the standard library. Vectors bring up another issue because they use templates, template types have to be explicitly defined in your SWIG mapping file. A class that uses std::string and std::vector might look like the following:
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">%</span><span class="n">module</span> <span class="n">simplelib</span>
</span><span class='line'><span class="o">%</span><span class="p">{</span>
</span><span class='line'><span class="cp">#include &quot;simpleclass.h&quot;</span>
</span><span class='line'><span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">typemaps</span><span class="p">.</span><span class="n">i</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="s">&quot;std_string.i&quot;</span>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="s">&quot;std_vector.i&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This will create 2 wrapped types in Go called</span>
</span><span class='line'><span class="c1">// &quot;StringVector&quot; and &quot;ByteVector&quot; for their respective</span>
</span><span class='line'><span class="c1">// types.</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">std</span> <span class="p">{</span>
</span><span class='line'>   <span class="o">%</span><span class="k">template</span><span class="p">(</span><span class="n">StringVector</span><span class="p">)</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>   <span class="o">%</span><span class="k">template</span><span class="p">(</span><span class="n">ByteVector</span><span class="p">)</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="s">&quot;simpleclass.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<br/>
<br/>

<p>
The following definitions are included with the SWIG library, go <a href="http://www.swig.org/Doc1.3/Library.html#Library_stl_cpp_library">here for full reference</a>
</p>

<table BORDER summary="SWIG C++ library files" class="table">
<tr>
<th>C++ class</th>
<th>C++ Library file</th>
<th>SWIG Interface library file</th>
</tr>

<tr> <td>std::deque</td>           <td>deque</td>             <td>std_deque.i</td> </tr>
<tr> <td>std::list</td>           <td>list</td>             <td>std_list.i</td> </tr>
<tr> <td>std::map</td>           <td>map</td>             <td>std_map.i</td> </tr>
<tr> <td>std::pair</td>           <td>utility</td>             <td>std_pair.i</td> </tr>
<tr> <td>std::set</td>           <td>set</td>             <td>std_set.i</td> </tr>
<tr> <td>std::string</td>           <td>string</td>             <td>std_string.i</td> </tr>
<tr> <td>std::vector</td>           <td>vector</td>             <td>std_vector.i</td> </tr>

</table>


<br/>
<br/>
<p>
Next we need to generate the necessary C++ wrapper code to allow Go to bind to it.
</p>



<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /project/src/
</span><span class='line'>SWIG -go -c++ simplelib.swig
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>
Some common optional paramaters you may need to use:
<ul>
<li>
&#8220;-soname&#8221; for specifying the name of your compiled shared library which is dynamically linked at runtime. e.g. -soname libSimpleLib.so.1
</li>
<li>
&#8220;-intgosize&#8221; Depending on which version of go you are using 1/1.1 and which platform you are targeting you may need to explicitly set the Go int size (note the documentation for this is currently out of date). e.g. -intgosize 64
</li>
</ul>
</p>

<p>
The above SWIG command should generate 3 new files in your project directory. Your project directory should now look something like the following:
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>simpleclass.h
</span><span class='line'>simpleclass.cpp
</span><span class='line'>simplelib.swig
</span><span class='line'>simplelib.go
</span><span class='line'>simplelib.cxx
</span><span class='line'>simplelib_gc.c
</span></code></pre></td></tr></table></div></figure>


<p>
Now we need to include these 3 new files in our projects. Simplelib.cxx contains the C++ wrapper code allowing your C++ project to interop with CGO. simplelib_gc.c contains the C code designed to be called from CGO. simplelib.go contains the GO code stubs for the resulting GO package, it uses cgo to call into the simplelib_gc.c interfaces. 
</p>
<p>
Add the simplelib.cxx file to the C++ project and build with the projects C++ compiler (I have only tested this process with GCC). Simply add it to your makefile or build script.
</p>

<p>
simplelib_gc.c and simplelib.go need to be included in the go package using the following 5/6/8c and 5/6/8g commands.
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go tool 6c -I &lt;Go Installation Path here&gt;/pkg/linux_amd64/ -D _64BIT simplelib_gc.c
</span><span class='line'>go tool 6g simplelib.go
</span><span class='line'>go tool pack grc simplelib.a simplelib.6 simplelib_gc.6
</span></code></pre></td></tr></table></div></figure>


<p>
The last step is installation: first install your compiled C++ shared library, then run go install on the package created in the last step.
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /go/src/simplelib/
</span><span class='line'>go install
</span></code></pre></td></tr></table></div></figure>


<p>
If the installation was successful you should see <i>simplelib.a</i> file in /go/pkg/<linux distro>/
</p>

<p>
That&#8217;s it! you should now be able to import &#8220;simplelib&#8221; in your go projects and call the wrapped C++ code.
</p>

<h3>Setting up Build Scripts</h3>

<p>
Because building Go packages requires the code to be in the GOPATH, I script out a &#8220;release&#8221; build process for my c++ project that does the necessary pre/post build steps listed above. This allows me to keep 2 streams of development going concurently, only publishing the go packages when they are ready for testing. I use the build commands feature built into qt Creator to accomplish this but you can achive the same results with a simple make file or bash script. To recap the steps required are:
</p>

<ol>
<li>Run SWIG tool (generate wrapper code) </li>
<li>Compile C++ project (including new wrapper code)</li>
<li>Copy the built C++ library and files generated in step 1 to a directory in your go path</li>
<li>Link and package the generated files into a Go Package</li>
<li>Run Go install to make the new package available in your applications</li>
</ol>

<br/>

<p>
This tutorial has shown you how to wrap simple classes. Feel free to leave your comments below.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Folders in qt Creator]]></title>
    <link href="http://zacg.github.io/blog/2013/06/01/nested-folders-in-qt-creator/"/>
    <updated>2013-06-01T22:21:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/06/01/nested-folders-in-qt-creator</id>
    <content type="html"><![CDATA[<p>
At first glance qt creator seems to be a feature rich ide however it still lacks many basic features such as being able to add sub folders for code to projects through the project explorer window. The following tutorial demonstrates how to get around the ide limitation by adding the folders manually.
</p>




<p>
The goal is to achive the below folder strucutre, project being the root, and &#8220;ModuleA&#8221; being the folder we need to add.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--Project
</span><span class='line'>--/ModuleA/
</span><span class='line'>----a.cpp
</span><span class='line'>----a.h
</span><span class='line'>----b.cpp
</span><span class='line'>----b.h
</span><span class='line'>--main.cpp
</span></code></pre></td></tr></table></div></figure>


<p>Start by navigating to the projects root directory, and create a new folder:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> mkdir ModuleA
</span></code></pre></td></tr></table></div></figure>


<p>Create a new file inside named &#8220;modulea.pri&#8221;. If you are going to copy existing files into this new folder you need to add them to the pri file. (Adding new files can be done through the qt creator gui once the project is configured properly)</p>

<p>Note the path names must be relative from the project root</p>

<figure class='code'><figcaption><span>title:ModuleA.pri </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>SOURCES +<span class="o">=</span> ModuleA/a.cpp <span class="se">\</span>
</span><span class='line'>    ModuleA/b.cpp <span class="se">\</span>
</span><span class='line'>
</span><span class='line'>HEADERS +<span class="o">=</span> ModuleA/a.h <span class="se">\</span>
</span><span class='line'>    ModuleA/b.h <span class="se">\</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to include the new .pri file for the folder in the project configuration. Open up the .pro file located in the project root directory and add the following line:</p>

<figure class='code'><figcaption><span>title:Project.pro </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>include<span class="o">(</span>ModuleA/ModuleA.pri<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reload the project, the new ModuleA folder should now be visible as a subfolder in your main project. Right clicking on it will give you the option to add new files. Simply repeat the above process for each new sub folder you wish to add.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jqGrid Inline Editing with asp.net MVC]]></title>
    <link href="http://zacg.github.io/blog/2013/06/01/inline-editing-for-jqgrid-with-asp-dot-net-mvc/"/>
    <updated>2013-06-01T13:54:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/06/01/inline-editing-for-jqgrid-with-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>
I am a frequent user of the popular jQuery plugin jqGrid. It comes with a large feature set for viewing and manipulating tabluar data in the browser. When I am working on an asp.net mvc projects I work with it via Robin van der Knaap&#8217;s lightweight html helper library: <a href="https://github.com/robinvanderknaap/MvcJqGrid">https://github.com/robinvanderknaap/MvcJqGrid</a> . It has strongly typed html helpers and a handy model binder for handling async grid functions.
</p>




<p>
Recently I required jqGrid&#8217;s <a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:inline_editing">inline editing feature</a> which is not supported in the MvcJqGrid library so via the power of github I went ahead and added it <a href="https://github.com/zacg/MvcJqGrid">https://github.com/zacg/MvcJqGrid</a>. 
</p>




<p>
The syntax follows the exisitng MvcJqGrid builder pattern and is very straightforward:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="err">@</span><span class="p">(</span><span class="n">Html</span><span class="p">.</span><span class="n">Grid</span><span class="p">(</span><span class="s">&quot;editing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetCaption</span><span class="p">(</span><span class="s">&quot;Inline Editing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;CustomerId&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetLabel</span><span class="p">(</span><span class="s">&quot;Id&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetCustomFormatter</span><span class="p">(</span><span class="s">&quot;buttonize&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="n">Formatters</span><span class="p">.</span><span class="n">Email</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">EditType</span><span class="p">.</span><span class="n">Text</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Company&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">MvcJqGrid</span><span class="p">.</span><span class="n">Enums</span><span class="p">.</span><span class="n">EditType</span><span class="p">.</span><span class="n">Select</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">SetEditOptions</span><span class="p">(</span><span class="k">new</span> <span class="n">EditOptions</span><span class="p">()</span> <span class="p">{</span> <span class="n">Value</span> <span class="p">=</span> <span class="s">&quot;0:Twitter; 1:Google; 2:Microsoft; 3:Cisco&quot;</span> <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;EmailAddress&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="n">Formatters</span><span class="p">.</span><span class="n">Email</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">EditType</span><span class="p">.</span><span class="n">Text</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditRules</span><span class="p">(</span><span class="k">new</span> <span class="n">EditRules</span><span class="p">()</span> <span class="p">{</span> <span class="n">Email</span> <span class="p">=</span> <span class="k">true</span> <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Last Modified&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Telephone&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetUrl</span><span class="p">(</span><span class="n">Url</span><span class="p">.</span><span class="n">Action</span><span class="p">(</span><span class="s">&quot;GridDataBasic&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetAutoWidth</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetRowNum</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetRowList</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="m">10</span><span class="p">,</span> <span class="m">15</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">50</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetViewRecords</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetPager</span><span class="p">(</span><span class="s">&quot;pager&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">script</span> <span class="n">type</span><span class="p">=</span><span class="s">&quot;text/javascript&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="n">function</span> <span class="nf">buttonize</span><span class="p">(</span><span class="n">cellvalue</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">rowobject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="err">&#39;</span><span class="p">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="p">=</span><span class="s">&quot;button&quot;</span> <span class="k">value</span><span class="p">=</span><span class="s">&quot;Edit&quot;</span> <span class="n">onclick</span><span class="p">=</span><span class="s">&quot;edit(&#39; + options.rowId + &#39;)&quot;</span><span class="p">&gt;</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">function</span> <span class="nf">edit</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">$</span><span class="p">(</span><span class="s">&quot;#editing&quot;</span><span class="p">).</span><span class="n">jqGrid</span><span class="p">(</span><span class="s">&quot;editRow&quot;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have submitted a pull request for my additions so it will become part of the core library shortly, if you can&#8217;t wait that long just clone my fork here: <a href="https://github.com/zacg/MvcJqGrid">https://github.com/zacg/MvcJqGrid</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setup opencv project with qt creator on linux]]></title>
    <link href="http://zacg.github.io/blog/2013/05/09/configuring-opencv-project-with-qt-creator-on-linux/"/>
    <updated>2013-05-09T02:08:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/09/configuring-opencv-project-with-qt-creator-on-linux</id>
    <content type="html"><![CDATA[<p>The following tutorial will show you how to setup a console project in qt creator for opencv based projects. It assumes you have already installed the opencv library.</p>

<p>If not installed, install qt creator</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get qtcreator
</span></code></pre></td></tr></table></div></figure>


<p>Open qt creator</p>

<p>create a new console application project</p>

<p>Add following lines to .pro file</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INCLUDEPATH +<span class="o">=</span> /usr/local/include/opencv2/
</span><span class='line'>
</span><span class='line'>LIBS +<span class="o">=</span> -L /usr/local/lib/
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_core
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_nonfree
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_imgproc
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_highgui
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_ml
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_video
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_features2d
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_calib3d
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_objdetect
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_contrib
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_legacy
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_flann
</span><span class='line'>LIBS +<span class="o">=</span> -lboost_system
</span><span class='line'>LIBS +<span class="o">=</span> -lboost_filesystem
</span></code></pre></td></tr></table></div></figure>


<p>By default qt creator will add some message pump related code to your main.cpp file, this can be commented out if you are just writing a console application (leaving it unmodified may prevent you from seeing output in the xterm console window)</p>

<p>If you are using ubuntu you will probably have to configure the x-term environment settings.</p>

<p>Goto: Tools -> options -> environment settings</p>

<p>Set the terminal field to the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/xterm -e
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Opencv xserver error with Eclipse CDE]]></title>
    <link href="http://zacg.github.io/blog/2013/05/05/fixing-opencv-xserver-error-with-cde/"/>
    <updated>2013-05-05T01:57:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/05/fixing-opencv-xserver-error-with-cde</id>
    <content type="html"><![CDATA[<p>When running your first opencv project with CDE you may experience the &#8220;cannot connect to x server&#8221; error when calling code that requires the opencv imageview or UI elements.</p>

<p><img src="http://zacg.github.io/images/content/xhostservererror.png" alt="x server error" /></p>

<br>


<br>


<br>


<p>To fix simply set DISPLAY in your projects environment variables, make sure a file in your project is selected then goto run-> run configurations -> environment and add a display variable like the following:</p>

<p><img src="http://zacg.github.io/images/content/cdeenvvariable.png" alt="x server error" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogs worth reading]]></title>
    <link href="http://zacg.github.io/blog/2013/05/03/blogs-i-recommend/"/>
    <updated>2013-05-03T22:04:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/03/blogs-i-recommend</id>
    <content type="html"><![CDATA[<p>The blogging engine I am using dosen&#8217;t have a &#8220;following&#8221; function so I am using this post to list the blogs I follow, I recommend them when people ask me where I learn various development related topics:</p>

<ul>
<li>
<a href="https://msmvps.com/blogs/jon_skeet/" >John Skeets blog</a>
</li>
<li>
<a href="http://ayende.com/blog" > Ayende Rahien&#8217;s blog</a>
</li>
<li>
<a href="http://tomasp.net/blog" >Tomas Petricek&#8217;s blog</a>
</li>
<li>
<a href="http://trelford.com/blog/" > Phil Trelford&#8217;s blog</a>
</li>
<li>
<a href="http://martinfowler.com/" > Martin Fowler</a>
</li>
<li>
<a href="http://blogs.msdn.com/b/dsyme/" > Don Syme</a>
</li>
<li>
<a href="http://ericlippert.com/" >Eric Lippert</a>
</li>
<li>
<a href="http://computer-vision-talks.com/" > Computer Vision Talks</a>
</li>
<li>
<a href="" ></a>
</li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing opencv 2.4.5 on Ubuntu 12 with Eclipse CDE]]></title>
    <link href="http://zacg.github.io/blog/2013/05/02/installing-opencv-2-dot-4-5-on-ubuntu-12-with-eclipse-cde/"/>
    <updated>2013-05-02T00:45:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/02/installing-opencv-2-dot-4-5-on-ubuntu-12-with-eclipse-cde</id>
    <content type="html"><![CDATA[<p><img src="http://zacg.github.io/images/content/OpenCV_Logo_with_text.png" alt="opencv logo" height="150px" width="150px" />
<img src="http://zacg.github.io/images/content/ubuntu-logo.jpg" alt="ubuntu logo" height="150px" width="150px"/>
<img src="http://zacg.github.io/images/content/eclipse-logo.png" alt="eclipse logo" height="150px" width="150px" /></p>

<p>The following is a brief tutorial on getting the opencv library setup with eclipse CDE on Ubuntu 12. The same eclipse project settings detailed in this tutorial can be re-used to build applicaions on top of opencv.</p>

<ol>
<li>
<span style="line-height: 13px;">
Start by getting things up to date
</span>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get upgrade
</span></code></pre></td></tr></table></div></figure>

</li>

<li>Install opencv dependencies so we can compile the opencv library

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev libtiff4-dev libjasper-dev libopenexr-dev cmake python-dev python-numpy python-tk libtbb-dev libeigen2-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev
</span></code></pre></td></tr></table></div></figure>

</li>

<li>Grab the current stable release of opencv, at the time of this post it was: 2.4.5

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget https://github.com/Itseez/opencv/archive/2.4.5.tar.gz
</span><span class='line'>tar -xvf OpenCV-2.4.5.tar.bz2
</span></code></pre></td></tr></table></div></figure>

</li>

<li>Now we need to build a makefile with cmake if you are just messing around and aren&#8217;t sure which modules to install you can run the following command which will include the most common ones including python bindings. Otherwise you can skip to 4a to select which options you want.

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cmake -D <span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE -D <span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/usr/local
</span><span class='line'>    -D <span class="nv">WITH_TBB</span><span class="o">=</span>ON -D <span class="nv">BUILD_NEW_PYTHON_SUPPORT</span><span class="o">=</span>ON -D <span class="nv">WITH_V4L</span><span class="o">=</span>ON
</span><span class='line'>    -D <span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>ON -D <span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON
</span><span class='line'>    -D <span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON -D <span class="nv">WITH_QT</span><span class="o">=</span>ON -D <span class="nv">WITH_OPENGL</span><span class="o">=</span>ON ..
</span></code></pre></td></tr></table></div></figure>


If you chose the above generic build options continue to step 5.

<ol>


<li>
We will use the cmake gui to select which components to include, start by installing it:

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get cmake-qt-gui
</span><span class='line'>sudo cmake-gui
</span></code></pre></td></tr></table></div></figure>

</li>

<li>A user interface dialog should appear. Select the directory you extraced the opencv source files to for the source directory. Create a new build direcory and select that in the gui as the build destination. Then click the configure button to the lower left, select &#8220;unix make files&#8221; for a generator, and &#8220;use native compilers&#8221; option.

<img src="http://zacg.github.io/images/content/CmakeGui.png" alt="cmake gui" />
</li>

<li>
The configuration process should populate the gui dialog with the available components, tick off desired ones, hover over the right column with the mouse cursor to see a more detailed description.
</li>

<li>
Click generate, cmake should populate the build directory with the necessary make files. Check the output window to ensure there were no errors.
</li>

</ol>
</li>

<li>
 Navigate to your build directory in a terminal and make. Then install.

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>release
</span><span class='line'>make
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>

</li>

<li>
To configure the dynamic linker we need to add a line to the end of ld.so.conf.d. The following command will open the file in a text editor (the file may be blank, that is fine).

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gedit /etc/ld.so.conf.d/opencv.conf
</span></code></pre></td></tr></table></div></figure>


Add the line:

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/lib
</span></code></pre></td></tr></table></div></figure>


and save it.

</li>

<li>
To configure bash.bashrc:


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gedit /etc/bash.bashrc
</span></code></pre></td></tr></table></div></figure>


And add:

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PKG_CONFIG_PATH</span><span class="o">=</span><span class="nv">$PKG_CONFIG_PATH</span>:/usr/local/lib/pkgconfig
</span><span class='line'><span class="nb">export </span>PKG_CONFIG_PATH
</span></code></pre></td></tr></table></div></figure>


</li>

<li>
Logout/restart before moving on to eclipse installation.
</li>

<li>
If you don&#8217;t already have eclipse with cde installed do that first with the following command


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install eclipse eclipse-cdt g++
</span></code></pre></td></tr></table></div></figure>


</li>

<li>
Open eclipse and create a new empty c++ project using the linux GCC toolchain

<img src="http://zacg.github.io/images/content/CdeNewProj.png" alt="cmake gui" />
</li>

<li>
Next we need to add some code to the project so we have something to build/run. I am goint to take the bag of words
example out of the /samples/cpp/ directory of the opencv project. Simple copy/paste the file into your new project.
</li>

<li>
Next we need to tell eclipse what libraries to include with the project and where to find them. Goto project -> properties on the file menu or just right click on the project in the projects pane and click on properties. A dialog should appear, click on C/C++ Build -> settings then click on includes.

Add the following to the include paths list <strong>Noted: if you need to compile projects with the older c++ api, you would replace opencv2 with opencv</strong>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/include/opencv2
</span></code></pre></td></tr></table></div></figure>


Next goto the GC++ Linker tab and add the following to the library search paths list:


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/lib
</span></code></pre></td></tr></table></div></figure>


then add the following libs to the libary list


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>opencv_core
</span><span class='line'>opencv_nonfree
</span><span class='line'>opencv_imgproc
</span><span class='line'>opencv_highgui
</span><span class='line'>opencv_ml
</span><span class='line'>opencv_video
</span><span class='line'>opencv_features2d
</span><span class='line'>opencv_calib3d
</span><span class='line'>opencv_objdetect
</span><span class='line'>opencv_contrib
</span><span class='line'>opencv_legacy
</span><span class='line'>opencv_flann
</span></code></pre></td></tr></table></div></figure>


for other projects you can remove uneceoctopress spell checkingssary libs or add dependent other dependant ones.
</li>


<li>
 
These project settings should now allow you to compile projects referencing opencv. Goto project -> build the project should build. Then run it, if you are using the bag of words example from the samples folder you should see console output similar to the following:



<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>This program shows how to <span class="nb">read </span>in, train on and produce <span class="nb">test </span>results <span class="k">for </span>the PASCAL VOC <span class="o">(</span>Visual Object Challenge<span class="o">)</span> data.
</span><span class='line'>It shows how to use detectors, descriptors and recognition methods
</span><span class='line'>Using OpenCV version %s
</span><span class='line'>2.4.5
</span><span class='line'>Call:
</span><span class='line'>Format:
</span><span class='line'> .//home/zac/dev/workspace2/Test2/Debug/Test2 <span class="o">[</span>VOC path<span class="o">]</span> <span class="o">[</span>result directory<span class="o">]</span>
</span><span class='line'>       or:
</span><span class='line'> .//home/zac/dev/workspace2/Test2/Debug/Test2 <span class="o">[</span>VOC path<span class="o">]</span> <span class="o">[</span>result directory<span class="o">]</span> <span class="o">[</span>feature detector<span class="o">]</span> <span class="o">[</span>descriptor extractor<span class="o">]</span> <span class="o">[</span>descriptor matcher<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Input parameters:
</span><span class='line'><span class="o">[</span>VOC path<span class="o">]</span>             Path to Pascal VOC data <span class="o">(</span>e.g. /home/my/VOCdevkit/VOC2010<span class="o">)</span>. Note: VOC2007-VOC2010 are supported.
</span><span class='line'><span class="o">[</span>result directory<span class="o">]</span>     Path to result diractory. Following folders will be created in <span class="o">[</span>result directory<span class="o">]</span>:
</span><span class='line'>                         bowImageDescriptors - to store image descriptors,
</span><span class='line'>                         svms - to store trained svms,
</span><span class='line'>                         plots - to store files <span class="k">for </span>plots creating.
</span><span class='line'><span class="o">[</span>feature detector<span class="o">]</span>     Feature detector name <span class="o">(</span>e.g. SURF, FAST...<span class="o">)</span> - see createFeatureDetector<span class="o">()</span> <span class="k">function </span>in detectors.cpp
</span><span class='line'>                         Currently 12/2010, this is FAST, STAR, SIFT, SURF, MSER, GFTT, HARRIS
</span><span class='line'><span class="o">[</span>descriptor extractor<span class="o">]</span> Descriptor extractor name <span class="o">(</span>e.g. SURF, SIFT<span class="o">)</span> - see createDescriptorExtractor<span class="o">()</span> <span class="k">function </span>in descriptors.cpp
</span><span class='line'>                         Currently 12/2010, this is SURF, OpponentSIFT, SIFT, OpponentSURF, BRIEF
</span><span class='line'><span class="o">[</span>descriptor matcher<span class="o">]</span>   Descriptor matcher name <span class="o">(</span>e.g. BruteForce<span class="o">)</span> - see createDescriptorMatcher<span class="o">()</span> <span class="k">function </span>in matchers.cpp
</span><span class='line'>                         Currently 12/2010, this is BruteForce, BruteForce-L1, FlannBased, BruteForce-Hamming, BruteForce-HammingLUT
</span></code></pre></td></tr></table></div></figure>



Tip: the bag of words example references each module individually, if you want to quickly
reference all the free modules for tesing just include 


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;opencv.hpp&quot;</span>
</span></code></pre></td></tr></table></div></figure>



</li>


</ol>




<p>
References:
<br>
<a href="http://docs.opencv.org/doc/tutorials/introduction/linux_eclipse/linux_eclipse.html">http://docs.opencv.org/doc/tutorials/introduction/linux_eclipse/linux_eclipse.html</a>

<br>
<a href="http://www.samontab.com/web/2012/06/installing-opencv-2-4-1-ubuntu-12-04-lts/">http://www.samontab.com/web/2012/06/installing-opencv-2-4-1-ubuntu-12-04-lts/</a>


</p>



]]></content>
  </entry>
  
</feed>
