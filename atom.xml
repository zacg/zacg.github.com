<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zac Gross]]></title>
  <link href="http://zacg.github.io/atom.xml" rel="self"/>
  <link href="http://zacg.github.io/"/>
  <updated>2014-03-27T03:13:25-04:00</updated>
  <id>http://zacg.github.io/</id>
  <author>
    <name><![CDATA[Zac Gross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Encoding Data in DNA with Go]]></title>
    <link href="http://zacg.github.io/blog/2014/03/26/encoding-data-in-dna-with-go/"/>
    <updated>2014-03-26T23:58:00-04:00</updated>
    <id>http://zacg.github.io/blog/2014/03/26/encoding-data-in-dna-with-go</id>
    <content type="html"><![CDATA[<p>
    As a recent programming exercise I wrote a golang library that allows encoding/decoding arbitrary data in DNA segments.
</p>




<p>
    The encoding algorithm is based on the method described in this Nature paper: <a href="http://www.nature.com/nature/journal/v494/n7435/full/nature11875.html">http://www.nature.com/nature/journal/v494/n7435/full/nature11875.html</a> . Pseudo code and details can be found here: <a href="http://www.nature.com/nature/journal/vaop/ncurrent/extref/nature11875-s2.pdf">http://www.nature.com/nature/journal/vaop/ncurrent/extref/nature11875-s2.pdf</a>
</p>




<p>
Usage Example:
</p>




<figure class='code'><figcaption><span>Encoding </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>   <span class="nx">str</span> <span class="o">:=</span> <span class="s">&quot;some string to encode in DNA&quot;</span>
</span><span class='line'>  <span class="nx">dna</span> <span class="o">:=</span> <span class="nx">dna</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Result: &quot;</span><span class="p">,</span> <span class="nx">dna</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
The resulting string is a valid DNA sequence.
</p>




<p>
Sequences can be decoded back to human readable text the same way:
</p>




<figure class='code'><figcaption><span>Decoding </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>   <span class="nx">dna</span> <span class="o">:=</span> <span class="s">&quot;ATAGTATATCGACTAGTACAGCGTAGCATCTCGCAGCGAGATACGCTGCTACGCAGCATGCTGTGAGTATCGATGACGAGTGACTCTGTACAGTACGTACGATACGTACGTACGTCGTATAGTCGTACGTACGTACGTACGTACGTACGTACTGTACAGAGTCACTCGTCATCGATACTCACAGCATGCTGCGTAGCAGCGTATCTCGCTGCGAGATGATACGTACGTACGAGC&quot;</span>
</span><span class='line'>  <span class="nx">str</span> <span class="o">:=</span> <span class="nx">dna</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">dna</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Result&quot;</span><span class="p">,</span><span class="nx">str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Source on github: <a href="https://github.com/zacg/dna">https://github.com/zacg/dna</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encoding Data in DNA with Go]]></title>
    <link href="http://zacg.github.io/blog/2014/03/26/encoding-data-as-dna-with-go/"/>
    <updated>2014-03-26T23:58:00-04:00</updated>
    <id>http://zacg.github.io/blog/2014/03/26/encoding-data-as-dna-with-go</id>
    <content type="html"><![CDATA[<p>
    As a recent programming exercise I wrote a golang library that allows the encoding/decoding of arbitrary data data in DNA segments.
</p>




<p>
    The encoding algorithm is based on the method described in this Nature paper: <a href="http://www.nature.com/nature/journal/v494/n7435/full/nature11875.html">http://www.nature.com/nature/journal/v494/n7435/full/nature11875.html</a> . Pseudo code and details can be found here: <a href="http://www.nature.com/nature/journal/vaop/ncurrent/extref/nature11875-s2.pdf">http://www.nature.com/nature/journal/vaop/ncurrent/extref/nature11875-s2.pdf</a>
</p>




<p>
Usage Example:
</p>




<figure class='code'><figcaption><span>Encoding </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>   <span class="nx">str</span> <span class="o">:=</span> <span class="s">&quot;Birney and Goldman&quot;</span>
</span><span class='line'>  <span class="nx">dna</span> <span class="o">:=</span> <span class="nx">dna</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Result: &quot;</span><span class="p">,</span> <span class="nx">dna</span><span class="p">)</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>




<p>
The resulting string is a valid DNA sequence.
</p>




<p>
Sequences can be decoded back to human readable text the same way:
</p>




<figure class='code'><figcaption><span>Decoding </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>   <span class="nx">dna</span> <span class="o">:=</span> <span class="s">&quot;ATAGTATATCGACTAGTACAGCGTAGCATCTCGCAGCGAGATACGCTGCTACGCAGCATGCTGTGAGTATCGATGACGAGTGACTCTGTACAGTACGTACGATACGTACGTACGTCGTATAGTCGTACGTACGTACGTACGTACGTACGTACTGTACAGAGTCACTCGTCATCGATACTCACAGCATGCTGCGTAGCAGCGTATCTCGCTGCGAGATGATACGTACGTACGAGC&quot;</span>
</span><span class='line'>  <span class="nx">str</span> <span class="o">:=</span> <span class="nx">dna</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">dna</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Result&quot;</span><span class="p">,</span><span class="nx">str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Source on github: <a href="https://github.com/zacg/dna">https://github.com/zacg/dna</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Nupic Cerebro Docker Image]]></title>
    <link href="http://zacg.github.io/blog/2014/03/21/new-nupic-cerebro-docker-image/"/>
    <updated>2014-03-21T01:22:00-04:00</updated>
    <id>http://zacg.github.io/blog/2014/03/21/new-nupic-cerebro-docker-image</id>
    <content type="html"><![CDATA[<p>
    CLA and Hierarchical Temporal Memory are finally starting to grow in popularity and an open source community is starting to grow around the open source <a href="https://github.com/numenta/nupic/">Nupic framework</a>. Currently Cerebro is the best tool (and only) for prototyping CLA models it allows you to visually dissect your work.
</p>


<p>
    Because Cerebro is a webapp built on mongodb and python it requires a bit of work get setup. To make it easier for newcomers to get up and running quickly I created a dockerfile containing all the dependencies required to run Cerebro. Once the docker image is built Cerebro can be run with one command. (Eventually users will be able to pull an official built image from dockers index)
</p>


<p>
    The Dockerfile is now located in the Cerebro repository: <a href="https://github.com/numenta/nupic.cerebro/blob/master/Dockerfile">https://github.com/numenta/nupic.cerebro/blob/master/Dockerfile</a>
</p>


<p>
    To build the docker image:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> sudo docker build -t<span class="o">=</span><span class="s2">&quot;nupic.cerebro&quot;</span> .
</span></code></pre></td></tr></table></div></figure>




<p>
    To run Cerebro on port: 1955:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> sudo docker run -p<span class="o">=</span>1955:1955 nupic.cerebro
</span></code></pre></td></tr></table></div></figure>




<p>
    Simply navigate to http://localhost:1955 to start using Cerebro. For an introductory video checkout: <a href="http://youtu.be/WQWU1K5tE5o">http://youtu.be/WQWU1K5tE5o</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Using Custom Header Title]]></title>
    <link href="http://zacg.github.io/blog/2014/02/28/android-using-custom-header-title/"/>
    <updated>2014-02-28T01:17:00-05:00</updated>
    <id>http://zacg.github.io/blog/2014/02/28/android-using-custom-header-title</id>
    <content type="html"><![CDATA[<p>
Trying to configure a custom header/title layout with the newer Android Holo Theme can be painful, often producing cryptic error messages. According to google the issue is with the new actionbar added in the halo theme conflicting with the older title configuration.
</p>




<p>
    Here is what worked for me: after creating a layout named &#8220;CustomHeader.xml&#8221; I added the following lines to my activity OnCreate method:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>   <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnCreate</span> <span class="p">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">base</span><span class="p">.</span><span class="n">OnCreate</span> <span class="p">(</span><span class="n">bundle</span><span class="p">);</span>
</span><span class='line'>      <span class="n">RequestWindowFeature</span><span class="p">(</span><span class="n">WindowFeatures</span><span class="p">.</span><span class="n">CustomTitle</span><span class="p">);</span>
</span><span class='line'>      <span class="n">SetContentView</span> <span class="p">(</span><span class="n">Resource</span><span class="p">.</span><span class="n">Layout</span><span class="p">.</span><span class="n">Main</span><span class="p">);</span>
</span><span class='line'>      <span class="n">Window</span><span class="p">.</span><span class="n">SetFeatureInt</span> <span class="p">(</span><span class="n">WindowFeatures</span><span class="p">.</span><span class="n">CustomTitle</span><span class="p">,</span> <span class="n">Resource</span><span class="p">.</span><span class="n">Layout</span><span class="p">.</span><span class="n">CustomHeader</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
I then modified my androidmanifiest.xml and style.xml files to configure a custom theme that inherits from the oridinal halo theme but removes the action bar.
</p>




<figure class='code'><figcaption><span>androidmanifiest.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>  <span class="nt">&lt;application</span> <span class="na">android:theme=</span><span class="s">&quot;@style/CustomTheme&quot;</span><span class="nt">&gt;&lt;/application&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>styles.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'>  <span class="nt">&lt;resources&gt;</span>
</span><span class='line'>  <span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;CustomTheme&quot;</span> <span class="na">parent=</span><span class="s">&quot;android:Theme.Holo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:windowActionBar&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
If you don&#8217;t already have a styles.xml file, it should be created in /resources/values/
</p>




<p>
If you try setting a custom header/title without removing the actionbar you will get the following runtime exception: <strong>&#8220;Cannot combine custom title with other title features&#8221;</strong>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Log4Net Appender]]></title>
    <link href="http://zacg.github.io/blog/2014/02/05/azure-log4net-appender/"/>
    <updated>2014-02-05T01:28:00-05:00</updated>
    <id>http://zacg.github.io/blog/2014/02/05/azure-log4net-appender</id>
    <content type="html"><![CDATA[<p>
    Recently when deploying an existing codebase to Azure I required the ability to configure log4net to write to azure storage services. 
</p>




<p>
    After some quick googling I found a NuGet package that seemed to be fairly well maintained and had a modest amount of users according to the NuGet download stats. NuGet Package here: <a href="http://www.nuget.org/packages/log4net.Appender.Azure/">http://www.nuget.org/packages/log4net.Appender.Azure/</a> or type the following in package manager console:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'> <span class="n">Install</span><span class="p">-</span><span class="n">Package</span> <span class="n">log4net</span><span class="p">.</span><span class="n">Appender</span><span class="p">.</span><span class="n">Azure</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    However I immediately ran into a few issues, first problems building it with my project as it was built with dependencies on older frameworks such as log4net. Additionally when running the table appender in a real application with multiple concurrent loggers I began to get errors related to the way it submitted batch inserts to the storage service.
</p>




<p>
    I was able to fork the NuGet project on github, update it&#8217;s dependencies, and fix the batch processing issue, you can find my branch here: <a href="https://github.com/zacg/log4net.Azure">https://github.com/zacg/log4net.Azure</a> I have submitted a pull request for these changes, hopefully they will appear in the next NuGet package release.
</p>




<p>
    Once referenced just choose your preferred storage method and set your connection string like so:
</p>




<figure class='code'><figcaption><span>Azure Appender Config Example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;log4net&gt;</span>
</span><span class='line'>    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&quot;TableAppender&quot;</span> <span class="na">type=</span><span class="s">&quot;log4net.Appender.AzureTableAppender, log4net.Appender.Azure&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;TableName&quot;</span> <span class="na">value=</span><span class="s">&quot;testLoggingTable&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;ConnectionString&quot;</span> <span class="na">value=</span><span class="s">&quot;UseDevelopmentStorage=true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;layout</span> <span class="na">type=</span><span class="s">&quot;log4net.Layout.PatternLayout&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;conversionPattern</span> <span class="na">value=</span><span class="s">&quot;%date [%thread] %-5level %logger [%property{NDC}] - %message%newline&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/layout&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/appender&gt;</span>
</span><span class='line'>    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&quot;BlobAppender&quot;</span> <span class="na">type=</span><span class="s">&quot;log4net.Appender.AzureBlobAppender, log4net.Appender.Azure&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;ContainerName&quot;</span> <span class="na">value=</span><span class="s">&quot;testloggingblob&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;DirectoryName&quot;</span> <span class="na">value=</span><span class="s">&quot;logs&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;ConnectionString&quot;</span> <span class="na">value=</span><span class="s">&quot;UseDevelopmentStorage=true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;layout</span> <span class="na">type=</span><span class="s">&quot;log4net.Layout.PatternLayout&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;conversionPattern</span> <span class="na">value=</span><span class="s">&quot;%date [%thread] %-5level %logger [%property{NDC}] - %message%newline&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/layout&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/appender&gt;</span>
</span><span class='line'>    <span class="nt">&lt;root&gt;</span>
</span><span class='line'>      <span class="nt">&lt;level</span> <span class="na">value=</span><span class="s">&quot;INFO&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&quot;TableAppender&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&quot;BlobAppender&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/root&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/log4net&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    If you ever have to debug log4net appenders here are a few snippets that may help you. The first is a function to flush the log buffers. The second turns on log4net debug logging, it will log to system.diagnostic.trace, just place the app setting in your config file. And the last snippet is just a setting to write your trace logs to file, again place in your config file.
</p>




<figure class='code'><figcaption><span>Flush Buffers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">//From: Alconja @ http://stackoverflow.com/questions/2045935/is-there-anyway-to-programmably-flush-the-buffer-in-log4net</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">FlushBuffers</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ILoggerRepository</span> <span class="n">rep</span> <span class="p">=</span> <span class="n">LogManager</span><span class="p">.</span><span class="n">GetRepository</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="n">IAppender</span> <span class="n">appender</span> <span class="k">in</span> <span class="n">rep</span><span class="p">.</span><span class="n">GetAppenders</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">buffered</span> <span class="p">=</span> <span class="n">appender</span> <span class="k">as</span> <span class="n">BufferingAppenderSkeleton</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">buffered</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">buffered</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Log log4net Debugging Info </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;appSettings&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;log4net.Internal.Debug&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appSettings&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Dump Trace Logs to File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;system.diagnostics&gt;</span>
</span><span class='line'>    <span class="nt">&lt;trace&gt;</span>
</span><span class='line'>     <span class="nt">&lt;listeners&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span>
</span><span class='line'>       <span class="na">name=</span><span class="s">&quot;textWriterTraceListener&quot;</span>
</span><span class='line'>       <span class="na">type=</span><span class="s">&quot;System.Diagnostics.TextWriterTraceListener&quot;</span>
</span><span class='line'>       <span class="na">initializeData=</span><span class="s">&quot;C:\dev\log4net.txt&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/listeners&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/trace&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/system.diagnostics&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    And finally a list of the errors encountered and fixed to help out random googlers.
    <ul>
        <li>Could not load file or assembly &#8216;log4net, Version=1.2.12.0, Culture=neutral, PublicKeyToken=669e0ddf0bb1aa2a&#8217; or one of its dependencies.</li>
        <li>WRN: Comparing the assembly name resulted in the mismatch: Build Number</li>
        <li>All entities in a single batch operation must have the same partition key</li>
    </ul>
</p>




<p>
    I ran into a few roadblocks along the way but ended up with a working log4net appender that can write logs to Azure storage services with a few simple configuration settings. If you have any comments feel free to share below.
</p>


<p>
  Source Code Here: <a href="https://github.com/zacg/log4net.Azure">https://github.com/zacg/log4net.Azure</a>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking Nested Models in Backbone Forms]]></title>
    <link href="http://zacg.github.io/blog/2013/11/28/checking-nested-models-in-backbone-forms/"/>
    <updated>2013-11-28T02:28:00-05:00</updated>
    <id>http://zacg.github.io/blog/2013/11/28/checking-nested-models-in-backbone-forms</id>
    <content type="html"><![CDATA[<p>
    When defining custom form templates in <a href="https://github.com/powmedia/backbone-forms">backbone forms</a> you may want to conditionally include content based on whether or not the form is nested. The following code will allow you to check using the template markup: 
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;%</span> <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">fieldTemplate</span> <span class="o">!=</span> <span class="s2">&quot;nestedField&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">%&gt;</span>
</span><span class='line'>  <span class="c1">//form is nested inside another</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="o">%&gt;</span>
</span><span class='line'>  <span class="c1">//form is not nested</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="p">}</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    This check will enable you to write fewer, more reusable form templates. The following changes to the default bootstrap template included with backbone forms allows you to include form submit and cancel buttons by setting a template data flag.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Form</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s1">&#39;\</span>
</span><span class='line'><span class="s1">    &lt;div&gt;\</span>
</span><span class='line'><span class="s1">    &lt;form class=&quot;form-horizontal&quot; data-fieldsets&gt;\</span>
</span><span class='line'><span class="s1">    &lt;/form&gt;\</span>
</span><span class='line'><span class="s1">    &lt;% if(submitbtn &amp;&amp; this.options.fieldTemplate != &quot;nestedField&quot;) { %&gt;\</span>
</span><span class='line'><span class="s1">      &lt;button class=&quot;btn btn-primary createBtn&quot; &gt;Create&lt;/button&gt;\</span>
</span><span class='line'><span class="s1">      &lt;button class=&quot;btn btn-danger cancelBtn&quot; &gt;Cancel&lt;/button&gt;\</span>
</span><span class='line'><span class="s1">    &lt;% } %&gt;\</span>
</span><span class='line'><span class="s1">    &lt;/div&gt;\</span>
</span><span class='line'><span class="s1">  &#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Setting the submitbtn flag in the templateData</span>
</span><span class='line'><span class="c1">//paramater will cause the buttons to appear on the form</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ExampleForm</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Form</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">templateData</span><span class="o">:</span> <span class="p">{</span> <span class="nx">submitbtn</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span><span class='line'>     <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang Type Comparisons and Struct Initialization Using Reflection]]></title>
    <link href="http://zacg.github.io/blog/2013/10/11/golang-type-comparisons-using-reflection/"/>
    <updated>2013-10-11T19:29:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/10/11/golang-type-comparisons-using-reflection</id>
    <content type="html"><![CDATA[<p>
While writing some basic <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> code for a recent project, I decided to create a base struct containing the redundant fields for all of my data entities (id,date_created, etc&#8230;). I then embedded this struct in all data entities and tagged it as inline so json/bson marshalers would treat it accordingly. A problem arose when I wanted to pass newly created data entities from clients into a json webservice. Normally when instantiating a data entity struct I would use the associated creation method (NewSomeEntity()) which would set the appropriate id/created date etc&#8230; however the json marshaler is not smart enough to do this as it builds the object graph. If the object graph is only one level deep, you can just run an init function on the new object returned from the marshaler, when the object contains n-levels (n-many relationships) it becomes a problem.
</p>


<p>
I had two options: I could implement custom marshal interfaces for every data entity struct, or I could write a function that reflects over the object graph after it has been built by the json marshaler and run my initialization function against any new/unintitalized base entity structs. I decided to go with the later option.
</p>




<p>
There are a few key functions needed to achieve the method described above, mainly: reflecting over an object to get a list of it&#8217;s fields, checking the type of the reflected field against your base struct, checking if the reflected field value is uninitialized or in the case of a pointer nil, and finally setting the value of an empty field to an initialized struct. 
</p>




<p>
Here are some code examples:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>  <span class="c1">//base struct for all data entities</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">Entity</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Id</span>        <span class="nx">Uuid</span> <span class="s">`bson:&quot;_id,omitempty&quot; json:id`</span>
</span><span class='line'>      <span class="nx">CreatedOn</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//initialization function</span>
</span><span class='line'> <span class="kd">func</span> <span class="nx">NewEntity</span><span class="p">()</span> <span class="nx">Entity</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Entity</span><span class="p">{</span><span class="nx">CreatedOn</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">(),</span> <span class="nx">Id</span><span class="p">:</span> <span class="nx">Uuid</span><span class="p">.</span><span class="nx">NewUuid</span><span class="p">()}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Reflect over object and get list of fields
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">obj</span> <span class="o">:=</span> <span class="nx">Entity</span><span class="p">{};</span>
</span><span class='line'><span class="c1">//retrieve list of fields</span>
</span><span class='line'><span class="nx">r</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">ValueOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">Elem</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//iterate over fields</span>
</span><span class='line'><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">NumField</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">f</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Field</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Compare reflected type
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">Type</span><span class="p">()</span> <span class="o">==</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">TypeOf</span><span class="p">(</span><span class="nx">Entity</span><span class="p">{}))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//reflected type is of type &quot;Entity&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Checking for uninitialized/empty struct
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">Interface</span><span class="p">().(</span><span class="nx">Entity</span><span class="p">)</span> <span class="o">==</span> <span class="nx">Entity</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//reflected field is an uninitialized entity struct</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Checking for nil pointer - if you are using pointers you may need to check for a nil pointer rather than an uninitialized struct.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">Kind</span><span class="p">()</span> <span class="o">==</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Pointer</span> <span class="o">&amp;&amp;</span> <span class="nx">f</span><span class="p">.</span><span class="nx">IsNil</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//reflected field is a null pointer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Finally once an empty field is found set it to an initialized Entity struct
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">//sets field f to an initialized Entity struct</span>
</span><span class='line'><span class="nx">f</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">ValueOf</span><span class="p">(</span><span class="nx">NewEntity</span><span class="p">()))</span>
</span></code></pre></td></tr></table></div></figure>




<p>
With the above snippets you can easily build a custom function for iterating over your object graph and initialize empty structs.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beware when Installing Swig from Debian Package]]></title>
    <link href="http://zacg.github.io/blog/2013/09/01/beware-when-installing-swig-from-debian-package/"/>
    <updated>2013-09-01T22:52:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/09/01/beware-when-installing-swig-from-debian-package</id>
    <content type="html"><![CDATA[<p>
Recently while generating Go bindings for a C++ library with Swig I begain noticing memory issues. Specifically when memory pressure was placed on the application I noticed output paramaters of standard types like std::vector were being randomly deallocated. After triple checking my Swig template files for the correct wrapping signatures and reviewing the generated Go and C/C++ code I was at a loss.
</p>




<p>
 After reviewing the Swig project commit log and noticing some fixes for Go related issues, I remembered I had installed Swig from the debian aptitude manager. Sure enough after running &#8220;swig -version&#8221; my swig version was at 2.0.7 (the current version at this time of writing was 2.0.10). 2.0.7 lacks many bug fixes related to Go. Downloading and installing 2.0.10 from the Swig website solved my memory issues.
</p>




<p>
<strong>Solution:</strong>
</p>




<ol>
    <li>
        Check Installed Swig version
        
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>     swig -version
</span><span class='line'>      
</span></code></pre></td></tr></table></div></figure>

    </li>
    <li>
        If version is < latest: unistall packaged version, then download and install current release from the website: <a href="http://swig.org">http://swig.org</a>
    </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File Parameter Support for Portable Restsharp Library]]></title>
    <link href="http://zacg.github.io/blog/2013/08/18/file-parameter-support-for-portable-restsharp-library/"/>
    <updated>2013-08-18T14:14:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/18/file-parameter-support-for-portable-restsharp-library</id>
    <content type="html"><![CDATA[<p>
    When developing mobile cross platform apps with Xamarin I like to keep as much common code as possible in a shared portable class library (PCL) for easy reuse. This includes any webservice calls and the associated boilerplate code. I have  been using a fork of the Restsharp library which has been modified to be PCL compliant. This strategy was working fine until recently when I needed to start uploading files through webservices. The Restsharp library has robust file upload support but because it is often tied to OS specific file operations it was left out of the PCL port. As a work around I simply imported the necessary file upload code from the original library using raw bytes and streams as interfaces rather than filenames. Leaving it up to the caller to implement the file loading in their native OS code.
</p>




<p>
My fork can be found on github at: <a href="https://github.com/zacg/geoserver-csharp">https://github.com/zacg/geoserver-csharp</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Simple Text List View Helper]]></title>
    <link href="http://zacg.github.io/blog/2013/08/18/xamarin-simple-text-list-view-helper/"/>
    <updated>2013-08-18T13:14:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/18/xamarin-simple-text-list-view-helper</id>
    <content type="html"><![CDATA[<p>
    Recently while working on an Xamarin based Android project I came up with a handy helper class for displaying basic list views. It saves alot of boilerplate code by not forcing a new adapter implementation for every domain object you want to use in a list view.
</p>


<p>
    The code:
</p>


<script src="https://gist.github.com/zacg/6262608.js"></script>




<p>
    And to use it:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">ListAdapter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SimpleTextAdapter</span><span class="p">&lt;</span><span class="n">SomeBusinessObject</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">objects</span><span class="p">,</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">item</span><span class="p">.</span><span class="n">Name</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Use it with a custom id field:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">ListAdapter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SimpleTextAdapter</span><span class="p">&lt;</span><span class="n">SomeBusinessObject</span><span class="p">&gt;</span> <span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">objects</span><span class="p">,</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">item</span><span class="p">.</span><span class="n">Name</span><span class="p">;},</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">item</span><span class="p">.</span><span class="n">CustomId</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Qt Creator Build Commands as Sudo]]></title>
    <link href="http://zacg.github.io/blog/2013/08/07/running-qt-creator-build-commands-as-sudo/"/>
    <updated>2013-08-07T20:00:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/07/running-qt-creator-build-commands-as-sudo</id>
    <content type="html"><![CDATA[<p>
    Recently I had a requirement to install a shared library as a build/deployment step in a QtCreator project, which of course required sudo permissions. Not surprisingly Qt Creator does not simply let you prepend &#8220;sudo&#8221; to a custom build step, here is the workaround I found:
</p>




<p>
First I moved all the commands that needed to run with sudo into a single make file like the following, mine was called InstallLib.make:
</p>




<figure class='code'><figcaption><span>InstallLib.make </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>install:
</span><span class='line'>  @echo <span class="s2">&quot;Installing go shared lib...&quot;</span>
</span><span class='line'>  sudo cp -f libImgSearch.so.1.0.0 /usr/local/lib/
</span><span class='line'>  sudo cp -f libImgSearch.so.1.0 /usr/local/lib/
</span><span class='line'>  sudo cp -f libImgSearch.so.1 /usr/local/lib/
</span><span class='line'>  sudo cp -f libImgSearch.so /usr/local/lib/
</span><span class='line'>  sudo ldconfig
</span></code></pre></td></tr></table></div></figure>




<p>
    Next in Qt Creator with your project open, goto the project section, add a new &#8220;custom process&#8221; build step. In the command field type: &#8220;ssh-askpass&#8221; this program will popup a widget to enter the sudo password when executed. In the build step arguments field enter: &#8220;Sudo Password | sudo -S make -f InstallLib.make&#8221;. This will make the ssh-askpass program execute the &#8220;InstalledLib.make&#8221; make file when a correct sudo password is provided.
</p>




<p>
If you prefer not to use the GUI, you could also edit your projects .user file and add some xml similar to the following:
</p>




<figure class='code'><figcaption><span>project.user </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   &lt;valuemap <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QVariantMap&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.BuildStepList.Step.10&quot;</span>&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;bool&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.BuildStep.Enabled&quot;</span>&gt;true&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProcessStep.Arguments&quot;</span>&gt;Sudo Password | sudo -S make -f InstallLib.make&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProcessStep.Command&quot;</span>&gt;ssh-askpass&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProcessStep.WorkingDirectory&quot;</span>&gt;%<span class="o">{</span>buildDir<span class="o">}</span>&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProjectConfiguration.DefaultDisplayName&quot;</span>&gt;Custom Process Step&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProjectConfiguration.DisplayName&quot;</span>&gt;&lt;/value&gt;
</span><span class='line'>      &lt;value <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;QString&quot;</span> <span class="nv">key</span><span class="o">=</span><span class="s2">&quot;ProjectExplorer.ProjectConfiguration.Id&quot;</span>&gt;ProjectExplorer.ProcessStep&lt;/value&gt;
</span><span class='line'>     &lt;/valuemap&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Combinations in Javascript]]></title>
    <link href="http://zacg.github.io/blog/2013/08/02/binary-combinations-in-javascript/"/>
    <updated>2013-08-02T09:16:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/08/02/binary-combinations-in-javascript</id>
    <content type="html"><![CDATA[<p>
While writing test coverage for a recent javascript project I was required to test every possible call to a function with a large number of binary parameters. Here is the function I came up with to generate the combinations:
</p>




<script src="https://gist.github.com/zacg/6139955.js"></script>




<p>
It&#8217;s pretty straight forward, pass in the length (n) of binary digits and it will return an array of all possible combinations as boolean values.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lowercase JSON Fields with Golang]]></title>
    <link href="http://zacg.github.io/blog/2013/07/31/lowercase-json-fields-with-golang/"/>
    <updated>2013-07-31T14:19:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/07/31/lowercase-json-fields-with-golang</id>
    <content type="html"><![CDATA[<p>
    The base GO libraries provide a handy function for marshaling structs into JSON. I recently came across an issue when writing webservices in GO for an existing javascript client. The problem was the client expected the JSON data to have field names starting with lowercase letters. GO&#8217;s naming convention is obviously going to make all struct fields uppercase by default as they need to be exported. I ended up copying the JSON marshaler code from GO&#8217;s library and modifiying it with a new paramater that will lowercase JSON field names when set. Because GO isn&#8217;t on github and I am strapped for time I just copied the code into a new util namespace and made the modifications as a couple of other gophers in #go-nuts were interested in using it.
</p>




<p>
Usage is simple, when the 2nd paramater is set to true, all fieldnames will start with a lowercase letter(other capitalization remains unchanged):
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">jsonutils</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(&lt;</span><span class="nx">some</span> <span class="nx">obj</span><span class="p">&gt;,</span> <span class="p">&lt;</span><span class="nx">lowercase</span> <span class="nx">fieldnames</span><span class="p">:</span><span class="kc">true</span><span class="o">/</span><span class="kc">false</span><span class="p">&gt;)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
The source code can be downloaded from github: <a href="https://github.com/zacg/goutils">https://github.com/zacg/goutils</a>
</p>




<p>And here is some boilerplate code to use it in a Revel controller:</p>




<div><script src='https://gist.github.com/6124880.js'></script>
<noscript><pre><code></code></pre></noscript></div>




<p>

</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calling C++ code from Go with SWIG]]></title>
    <link href="http://zacg.github.io/blog/2013/06/06/calling-c-plus-plus-code-from-go-with-swig/"/>
    <updated>2013-06-06T22:51:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/06/06/calling-c-plus-plus-code-from-go-with-swig</id>
    <content type="html"><![CDATA[<p>

 Recently while working on a Go based project I needed to use some functionality from another large C++ library. The library&#8217;s size and complexity made re-writing it in Go unfeasible. After some research I decided to use the popular SWIG (Simplified Wrapper and Interface Generator) framework to enable interop between my two projects.  

</p>




<p>
The following is a brief tutorial to guide you through configuring SWIG with Go.
</p>




<p>
Start by installing GO and SWIG if not already installed
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install golang
</span><span class='line'>sudo apt-get install swig
</span></code></pre></td></tr></table></div></figure>




<div class="alert alert-danger">
<p>
<strong>Update:</strong> The debian package is out of date and lacking many go related fixes, it is best to install current SWIG release from SWIG website: <a href="http://swig.org">http://swig.org</a>
</p>
<p>
    I also recommend installing golang from source as some of the following commands only work with go 1.1 and up. <a href="http://golang.org/doc/install/source">http://golang.org/doc/install/source</a>
</p>
</div>




<p>
Once everything in installed the first step is to define a module file which will tell the SWIG tool what code in the C++ project to expose in the resulting GO package. We&#8217;ll assume your project is object oriented with cpp/header files for each class, when this is the case we can just include the desired header files in our SWIG module.
</p>




<p>
 We will pretend our C++ project is a dynamically linked shared library called &#8220;simplelib&#8221; and contains the following files:
<p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>simpleclass.h
</span><span class='line'>simpleclass.cpp
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>
We will add a module file called <i>simplelib.swig</i>. Inside we include the simpleclass.h header, this will instruct the SWIG tool to generate wrapping code for this class allowing us to use it in GO.
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">%</span><span class="n">module</span> <span class="n">simplelib</span>  <span class="c1">//name of the resulting GO package</span>
</span><span class='line'><span class="o">%</span><span class="p">{</span>
</span><span class='line'><span class="cp">#include &quot;simpleclass.h&quot;</span>
</span><span class='line'><span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="s">&quot;simpleclass.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
If your wrapped class(es) are simple and use primitive types the above swig file should suffice, SWIG will translate the following primitive types to the specified Go types
</p>

<table summary="Go primitive type mappings" class="table">
<tr>
<th>C/C++ type</th>
<th>Go type</th>
</tr>

<tr>
<td>bool</td>
<td>bool</td>
</tr>

<tr>
<td>char</td>
<td>byte</td>
</tr>

<tr>
<td>signed char</td>
<td>int8</td>
</tr>

<tr>
<td>unsigned char</td>
<td>byte</td>
</tr>

<tr>
<td>short</td>
<td>int16</td>
</tr>

<tr>
<td>unsigned short</td>
<td>uint16</td>
</tr>

<tr>
<td>int</td>
<td>int</td>
</tr>

<tr>
<td>unsigned int</td>
<td>uint</td>
</tr>

<tr>
<td>long</td>
<td>int32 or int64, depending on <tt>-long-type-size</tt></td>
</tr>

<tr>
<td>unsigned long</td>
<td>uint32 or uint64, depending on <tt>-long-type-size</tt></td>
</tr>

<tr>
<td>long long</td>
<td>int64</td>
</tr>

<tr>
<td>unsigned long long</td>
<td>uint64</td>
</tr>

<tr>
<td>float</td>
<td>float32</td>
</tr>

<tr>
<td>double</td>
<td>float64</td>
</tr>

<tr>
<td>char *<br>char []</td>
<td>string</td>
</tr>

</table>

<br/>

<p>
If your target code contains non-primitive types you have a bit more work to do. SWIG includes headers to help with common non primitive types like string and vector from the standard library. Vectors bring up another issue because they use templates, template types have to be explicitly defined in your SWIG mapping file. A class that uses std::string and std::vector might look like the following:
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">%</span><span class="n">module</span> <span class="n">simplelib</span>
</span><span class='line'><span class="o">%</span><span class="p">{</span>
</span><span class='line'><span class="cp">#include &quot;simpleclass.h&quot;</span>
</span><span class='line'><span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">typemaps</span><span class="p">.</span><span class="n">i</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="s">&quot;std_string.i&quot;</span>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="s">&quot;std_vector.i&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This will create 2 wrapped types in Go called</span>
</span><span class='line'><span class="c1">// &quot;StringVector&quot; and &quot;ByteVector&quot; for their respective</span>
</span><span class='line'><span class="c1">// types.</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">std</span> <span class="p">{</span>
</span><span class='line'>   <span class="o">%</span><span class="k">template</span><span class="p">(</span><span class="n">StringVector</span><span class="p">)</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>   <span class="o">%</span><span class="k">template</span><span class="p">(</span><span class="n">ByteVector</span><span class="p">)</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">include</span> <span class="s">&quot;simpleclass.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<br/>
<br/>

<p>
The following definitions are included with the SWIG library, go <a href="http://www.swig.org/Doc1.3/Library.html#Library_stl_cpp_library">here for full reference</a>
</p>

<table BORDER summary="SWIG C++ library files" class="table">
<tr>
<th>C++ class</th>
<th>C++ Library file</th>
<th>SWIG Interface library file</th>
</tr>

<tr> <td>std::deque</td>           <td>deque</td>             <td>std_deque.i</td> </tr>
<tr> <td>std::list</td>           <td>list</td>             <td>std_list.i</td> </tr>
<tr> <td>std::map</td>           <td>map</td>             <td>std_map.i</td> </tr>
<tr> <td>std::pair</td>           <td>utility</td>             <td>std_pair.i</td> </tr>
<tr> <td>std::set</td>           <td>set</td>             <td>std_set.i</td> </tr>
<tr> <td>std::string</td>           <td>string</td>             <td>std_string.i</td> </tr>
<tr> <td>std::vector</td>           <td>vector</td>             <td>std_vector.i</td> </tr>

</table>


<br/>
<br/>
<p>
Next we need to generate the necessary C++ wrapper code to allow Go to bind to it.
</p>



<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /project/src/
</span><span class='line'>SWIG -go -c++ simplelib.swig
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>
Some common optional paramaters you may need to use:
<ul>
<li>
&#8220;-soname&#8221; for specifying the name of your compiled shared library which is dynamically linked at runtime. e.g. -soname libSimpleLib.so.1
</li>
<li>
&#8220;-intgosize&#8221; Depending on which version of go you are using 1/1.1 and which platform you are targeting you may need to explicitly set the Go int size (note the documentation for this is currently out of date). e.g. -intgosize 64
</li>
</ul>
</p>

<p>
The above SWIG command should generate 3 new files in your project directory. Your project directory should now look something like the following:
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>simpleclass.h
</span><span class='line'>simpleclass.cpp
</span><span class='line'>simplelib.swig
</span><span class='line'>simplelib.go
</span><span class='line'>simplelib.cxx
</span><span class='line'>simplelib_gc.c
</span></code></pre></td></tr></table></div></figure>


<p>
Now we need to include these 3 new files in our projects. Simplelib.cxx contains the C++ wrapper code allowing your C++ project to interop with CGO. simplelib_gc.c contains the C code designed to be called from CGO. simplelib.go contains the GO code stubs for the resulting GO package, it uses cgo to call into the simplelib_gc.c interfaces. 
</p>
<p>
Add the simplelib.cxx file to the C++ project and build with the projects C++ compiler (I have only tested this process with GCC). Simply add it to your makefile or build script.
</p>

<p>
simplelib_gc.c and simplelib.go need to be included in the go package using the following 5/6/8c and 5/6/8g commands.
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go tool 6c -I &lt;Go Installation Path here&gt;/pkg/linux_amd64/ -D _64BIT simplelib_gc.c
</span><span class='line'>go tool 6g simplelib.go
</span><span class='line'>go tool pack grc simplelib.a simplelib.6 simplelib_gc.6
</span></code></pre></td></tr></table></div></figure>


<p>
The last step is installation: first install your compiled C++ shared library, then run go install on the package created in the last step.
</p>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /go/src/simplelib/
</span><span class='line'>go install
</span></code></pre></td></tr></table></div></figure>


<p>
If the installation was successful you should see <i>simplelib.a</i> file in /go/pkg/<linux distro>/
</p>

<p>
That&#8217;s it! you should now be able to import &#8220;simplelib&#8221; in your go projects and call the wrapped C++ code.
</p>

<h3>Setting up Build Scripts</h3>

<p>
Because building Go packages requires the code to be in the GOPATH, I script out a &#8220;release&#8221; build process for my c++ project that does the necessary pre/post build steps listed above. This allows me to keep 2 streams of development going concurrently, only publishing the go packages when they are ready for testing. I use the build commands feature built into qt Creator to accomplish this but you can achieve the same results with a simple make file or bash script. To recap the steps required are:
</p>

<ol>
<li>Run SWIG tool (generate wrapper code) </li>
<li>Compile C++ project (including new wrapper code)</li>
<li>Copy the built C++ library and files generated in step 1 to a directory in your go path</li>
<li>Link and package the generated files into a Go Package</li>
<li>Run Go install to make the new package available in your applications</li>
</ol>

<br/>

<p>
This tutorial has shown you how to wrap simple classes. Feel free to leave your comments below.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Folders in qt Creator]]></title>
    <link href="http://zacg.github.io/blog/2013/06/01/nested-folders-in-qt-creator/"/>
    <updated>2013-06-01T22:21:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/06/01/nested-folders-in-qt-creator</id>
    <content type="html"><![CDATA[<p>
At first glance qt creator seems to be a feature rich ide however it still lacks many basic features such as being able to add sub folders for code to projects through the project explorer window. The following tutorial demonstrates how to get around the ide limitation by adding the folders manually.
</p>




<p>
The goal is to achive the below folder strucutre, project being the root, and &#8220;ModuleA&#8221; being the folder we need to add.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--Project
</span><span class='line'>--/ModuleA/
</span><span class='line'>----a.cpp
</span><span class='line'>----a.h
</span><span class='line'>----b.cpp
</span><span class='line'>----b.h
</span><span class='line'>--main.cpp
</span></code></pre></td></tr></table></div></figure>


<p>Start by navigating to the projects root directory, and create a new folder:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> mkdir ModuleA
</span></code></pre></td></tr></table></div></figure>


<p>Create a new file inside named &#8220;modulea.pri&#8221;. If you are going to copy existing files into this new folder you need to add them to the pri file. (Adding new files can be done through the qt creator gui once the project is configured properly)</p>

<p>Note the path names must be relative from the project root</p>

<figure class='code'><figcaption><span>title:ModuleA.pri </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>SOURCES +<span class="o">=</span> ModuleA/a.cpp <span class="se">\</span>
</span><span class='line'>    ModuleA/b.cpp <span class="se">\</span>
</span><span class='line'>
</span><span class='line'>HEADERS +<span class="o">=</span> ModuleA/a.h <span class="se">\</span>
</span><span class='line'>    ModuleA/b.h <span class="se">\</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to include the new .pri file for the folder in the project configuration. Open up the .pro file located in the project root directory and add the following line:</p>

<figure class='code'><figcaption><span>title:Project.pro </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>include<span class="o">(</span>ModuleA/ModuleA.pri<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reload the project, the new ModuleA folder should now be visible as a subfolder in your main project. Right clicking on it will give you the option to add new files. Simply repeat the above process for each new sub folder you wish to add.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jqGrid Inline Editing with asp.net MVC]]></title>
    <link href="http://zacg.github.io/blog/2013/06/01/inline-editing-for-jqgrid-with-asp-dot-net-mvc/"/>
    <updated>2013-06-01T13:54:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/06/01/inline-editing-for-jqgrid-with-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>
I am a frequent user of the popular jQuery plugin jqGrid. It comes with a large feature set for viewing and manipulating tabluar data in the browser. When I am working on an asp.net mvc projects I work with it via Robin van der Knaap&#8217;s lightweight html helper library: <a href="https://github.com/robinvanderknaap/MvcJqGrid">https://github.com/robinvanderknaap/MvcJqGrid</a> . It has strongly typed html helpers and a handy model binder for handling async grid functions.
</p>




<p>
Recently I required jqGrid&#8217;s <a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:inline_editing">inline editing feature</a> which is not supported in the MvcJqGrid library so via the power of github I went ahead and added it <a href="https://github.com/zacg/MvcJqGrid">https://github.com/zacg/MvcJqGrid</a>. 
</p>




<p>
The syntax follows the exisitng MvcJqGrid builder pattern and is very straightforward:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="err">@</span><span class="p">(</span><span class="n">Html</span><span class="p">.</span><span class="n">Grid</span><span class="p">(</span><span class="s">&quot;editing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetCaption</span><span class="p">(</span><span class="s">&quot;Inline Editing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;CustomerId&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetLabel</span><span class="p">(</span><span class="s">&quot;Id&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetCustomFormatter</span><span class="p">(</span><span class="s">&quot;buttonize&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="n">Formatters</span><span class="p">.</span><span class="n">Email</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">EditType</span><span class="p">.</span><span class="n">Text</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Company&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">MvcJqGrid</span><span class="p">.</span><span class="n">Enums</span><span class="p">.</span><span class="n">EditType</span><span class="p">.</span><span class="n">Select</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">SetEditOptions</span><span class="p">(</span><span class="k">new</span> <span class="n">EditOptions</span><span class="p">()</span> <span class="p">{</span> <span class="n">Value</span> <span class="p">=</span> <span class="s">&quot;0:Twitter; 1:Google; 2:Microsoft; 3:Cisco&quot;</span> <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;EmailAddress&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="n">Formatters</span><span class="p">.</span><span class="n">Email</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">EditType</span><span class="p">.</span><span class="n">Text</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditRules</span><span class="p">(</span><span class="k">new</span> <span class="n">EditRules</span><span class="p">()</span> <span class="p">{</span> <span class="n">Email</span> <span class="p">=</span> <span class="k">true</span> <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Last Modified&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Telephone&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetUrl</span><span class="p">(</span><span class="n">Url</span><span class="p">.</span><span class="n">Action</span><span class="p">(</span><span class="s">&quot;GridDataBasic&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetAutoWidth</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetRowNum</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetRowList</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="m">10</span><span class="p">,</span> <span class="m">15</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">50</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetViewRecords</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetPager</span><span class="p">(</span><span class="s">&quot;pager&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">script</span> <span class="n">type</span><span class="p">=</span><span class="s">&quot;text/javascript&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="n">function</span> <span class="nf">buttonize</span><span class="p">(</span><span class="n">cellvalue</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">rowobject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="err">&#39;</span><span class="p">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="p">=</span><span class="s">&quot;button&quot;</span> <span class="k">value</span><span class="p">=</span><span class="s">&quot;Edit&quot;</span> <span class="n">onclick</span><span class="p">=</span><span class="s">&quot;edit(&#39; + options.rowId + &#39;)&quot;</span><span class="p">&gt;</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">function</span> <span class="nf">edit</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">$</span><span class="p">(</span><span class="s">&quot;#editing&quot;</span><span class="p">).</span><span class="n">jqGrid</span><span class="p">(</span><span class="s">&quot;editRow&quot;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have submitted a pull request for my additions so it will become part of the core library shortly, if you can&#8217;t wait that long just clone my fork here: <a href="https://github.com/zacg/MvcJqGrid">https://github.com/zacg/MvcJqGrid</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on C++ for C# developers]]></title>
    <link href="http://zacg.github.io/blog/2013/05/29/notes-on-c-plus-plus--for-c-number-developers/"/>
    <updated>2013-05-29T02:25:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/29/notes-on-c-plus-plus&#8211;for-c-number-developers</id>
    <content type="html"><![CDATA[<p>After primarily working in C# for the last 5 years I recently switched back to c++ for a large project. I am going to use this article to post notes/gotcha&#8217;s/tips as a I come across them. I already have a few to add, and will update as I go along. Hopefully they help some c# programmers out there. They are listed in no particular order.</p>

<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">C++ does not support template type constraints/guards on template definitions</h3>
  </div>
  <div class="panel-body">
    <p>
Gotcha: C++ does not support template type constraints/guards on template definitions. I ended up using static asserts (requires c++ 11), the example shown below uses helper methods from the popular boost library.
    </p>
   

<figure class='code'><figcaption><span>c# </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">class</span> <span class="nc">TestSuite</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">:</span>  <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">SomeType</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>C++ </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">Case</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TestSuite</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'> <span class="n">BOOST_STATIC_ASSERT</span><span class="p">((</span><span class="n">boost</span><span class="o">::</span><span class="n">is_base_of</span><span class="o">&lt;</span><span class="n">ITestCase</span><span class="p">,</span> <span class="n">Case</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

  </div>
 </div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">By default inheritance is private in c++</h3>
  </div>
  <div class="panel-body">



<figure class='code'><figcaption><span>C# </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">class</span> <span class="nc">b</span>
</span><span class='line'>  <span class="p">:</span> <span class="k">class</span> <span class="nc">a</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t forget the &#8220;public&#8221; declaration if you are used to c#.</p>


<figure class='code'><figcaption><span>C++ </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">b</span>
</span><span class='line'> <span class="o">:</span> <span class="k">public</span> <span class="k">class</span> <span class="nc">a</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Member access specified at group level</h3>
  </div>
  <div class="panel-body">

<p>Access identifier specified on each member.</p>

<figure class='code'><figcaption><span>C#</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">SomeProp</span> <span class="p">{</span><span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">GetSomeOtherProp</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Access can be grouped.</p>

<figure class='code'><figcaption><span>C++ </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">GetSomeProp</span><span class="p">();</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">GetSomeOtherProp</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">C++ supports multiple inheiritance</h3>
  </div>
  <div class="panel-body">
<p>
Unlike C#, C++ supports multiple inheiritance, while this may seem like a benifit it should be used very very rarely. If you find your object model requires multiple inheiritance it is best to reevaluate your design or you will end up facing issues like the <a href="http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem">diamond of death</a>.
</p>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Rule of 3</h3>
  </div>
  <div class="panel-body">
<p>
Remember the <a href="http://en.wikipedia.org/wiki/Rule_of_three_%28C++_programming%29">rule of 3</a>.

If you require any of the following then you should explicitly define all three.
<ul>
<li>copy constructor</li>
<li>copy assingment operator</li>
<li>destructor</li>
</ul>

</p>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Temproraries with Parameterless Constructors</h3>
  </div>
  <div class="panel-body">
    <p>
Don&#8217;t include parathesis on paramaterless constructors the compiler will favour resolving it as a function declaration and you will end up with an error message like:


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">error:</span> <span class="n">request</span> <span class="k">for</span> <span class="n">member</span> <span class="err">&#39;</span><span class="n">method</span><span class="err">&#39;</span> <span class="n">in</span> <span class="err">&#39;</span><span class="n">someObj</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">which</span> <span class="n">is</span> <span class="n">of</span> <span class="n">non</span><span class="o">-</span><span class="k">class</span> <span class="nc">type</span> <span class="err">&#39;</span><span class="n">someType</span><span class="p">()</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


Parthensis can still be used when using the &#8220;new&#8221; keyword


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//bad</span>
</span><span class='line'><span class="n">someObj</span> <span class="n">obj</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//good</span>
</span><span class='line'><span class="n">someObj</span> <span class="n">obj</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


</p>

</div>
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">STL containers copy their values.</h3>
  </div>
  <div class="panel-body">
    <p>
        When adding items to STL containters remember the container does a copy and keeps track of it&#8217;s own copy of the item being added.
    </p>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Follow the Virtual Constructor Idiom</h3>
  </div>
  <div class="panel-body">
<p>
    When creating abstract base classes follow the  <a href="http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Virtual_Constructor">virtual constructor idiom</a>
    and create virtual clone and create methods.

    This allows you to create collections of base types while still being able to copy them without knowing their concrete type.
</p>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Dynamic Linking Libraries</h3>
  </div>
  <div class="panel-body">
  <p>
    Here are some tips and tools for working with dynamically linked libraries and shared objects.
  </p>
  <ul>
    <li>Shared library files to be registered must start with &#8220;lib&#8221;</li>
    <li>Use ldconfig -v to see registered libraries</li>
    <li>Use ldconfig to reload linked libraries</li>
    <li>Export ldpath to temporarily point executable at your lib, handy for scripting.</li>
    <li>Use ldd command to view an executables dependencies.</li>
    <li>Use nm &#8211;demangle <some.so> to view shared objects exported symbol list.</li>
  </ul>

  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Can&#8217;t call virtual methods from constructor</h3>
  </div>
  <div class="panel-body">
    Virtual methods can&#8217;t be called from within constructors. This usually means you have to use a two stage approach to initialization of derived classes.
  
  </div>
  
</div>




<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Avoid importing namespaces</h3>
  </div>
  <div class="panel-body">
    It is bad practice to use &#8220;using namespace <...>;&#8221;. When including third party libraries there can be naming conflicts which become a pain to track down in a large project.
  </div>
  
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setup opencv project with qt creator on linux]]></title>
    <link href="http://zacg.github.io/blog/2013/05/09/configuring-opencv-project-with-qt-creator-on-linux/"/>
    <updated>2013-05-09T02:08:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/09/configuring-opencv-project-with-qt-creator-on-linux</id>
    <content type="html"><![CDATA[<p>The following tutorial will show you how to setup a console project in qt creator for opencv based projects. It assumes you have already installed the opencv library.</p>

<p>If not installed, install qt creator</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get qtcreator
</span></code></pre></td></tr></table></div></figure>


<p>Open qt creator</p>

<p>create a new console application project</p>

<p>Add following lines to .pro file</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INCLUDEPATH +<span class="o">=</span> /usr/local/include/opencv2/
</span><span class='line'>
</span><span class='line'>LIBS +<span class="o">=</span> -L /usr/local/lib/
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_core
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_nonfree
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_imgproc
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_highgui
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_ml
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_video
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_features2d
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_calib3d
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_objdetect
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_contrib
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_legacy
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_flann
</span><span class='line'>LIBS +<span class="o">=</span> -lboost_system
</span><span class='line'>LIBS +<span class="o">=</span> -lboost_filesystem
</span></code></pre></td></tr></table></div></figure>


<p>By default qt creator will add some message pump related code to your main.cpp file, this can be commented out if you are just writing a console application (leaving it unmodified may prevent you from seeing output in the xterm console window)</p>

<p>If you are using ubuntu you will probably have to configure the x-term environment settings.</p>

<p>Goto: Tools -> options -> environment settings</p>

<p>Set the terminal field to the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/xterm -e
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Opencv xserver error with Eclipse CDE]]></title>
    <link href="http://zacg.github.io/blog/2013/05/05/fixing-opencv-xserver-error-with-cde/"/>
    <updated>2013-05-05T01:57:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/05/fixing-opencv-xserver-error-with-cde</id>
    <content type="html"><![CDATA[<p>When running your first opencv project with CDE you may experience the &#8220;cannot connect to x server&#8221; error when calling code that requires the opencv imageview or UI elements.</p>

<p><img src="http://zacg.github.io/images/content/xhostservererror.png" alt="x server error" /></p>

<br>


<br>


<br>


<p>To fix simply set DISPLAY in your projects environment variables, make sure a file in your project is selected then goto run-> run configurations -> environment and add a display variable like the following:</p>

<p><img src="http://zacg.github.io/images/content/cdeenvvariable.png" alt="x server error" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogs worth reading]]></title>
    <link href="http://zacg.github.io/blog/2013/05/03/blogs-i-recommend/"/>
    <updated>2013-05-03T22:04:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/03/blogs-i-recommend</id>
    <content type="html"><![CDATA[<p>The blogging engine I am using dosen&#8217;t have a &#8220;following&#8221; function so I am using this post to list the blogs I follow, I recommend them when people ask me where I learn various development related topics:</p>

<ul>
<li>
<a href="https://msmvps.com/blogs/jon_skeet/" >John Skeets blog</a>
</li>
<li>
<a href="http://ayende.com/blog" > Ayende Rahien&#8217;s blog</a>
</li>
<li>
<a href="http://tomasp.net/blog" >Tomas Petricek&#8217;s blog</a>
</li>
<li>
<a href="http://trelford.com/blog/" > Phil Trelford&#8217;s blog</a>
</li>
<li>
<a href="http://martinfowler.com/" > Martin Fowler</a>
</li>
<li>
<a href="http://blogs.msdn.com/b/dsyme/" > Don Syme</a>
</li>
<li>
<a href="http://ericlippert.com/" >Eric Lippert</a>
</li>
<li>
<a href="http://computer-vision-talks.com/" > Computer Vision Talks</a>
</li>
<li>
<a href="" ></a>
</li>
</ul>



]]></content>
  </entry>
  
</feed>
