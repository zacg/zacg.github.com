<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zac Gross]]></title>
  <link href="http://zacg.github.io/atom.xml" rel="self"/>
  <link href="http://zacg.github.io/"/>
  <updated>2013-06-01T14:28:51-04:00</updated>
  <id>http://zacg.github.io/</id>
  <author>
    <name><![CDATA[Zac Gross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jqGrid Inline Editing with asp.net MVC]]></title>
    <link href="http://zacg.github.io/blog/2013/06/01/inline-editing-for-jqgrid-with-asp-dot-net-mvc/"/>
    <updated>2013-06-01T13:54:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/06/01/inline-editing-for-jqgrid-with-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>
I am a frequent user of the popular jQuery plugin jqGrid. It comes with a large feature set for viewing and manipulating tabluar data in the browser. When I am working on an asp.net mvc projects I work with it via Robin van der Knaap&#8217;s lightweight html helper library: <a href="https://github.com/robinvanderknaap/MvcJqGrid">https://github.com/robinvanderknaap/MvcJqGrid</a> . It has strongly typed html helpers and a handy model binder for handling async grid functions.
</p>




<p>
Recently I required jqGrid&#8217;s <a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:inline_editing">inline editing feature</a> which is not supported in the MvcJqGrid library so via the power of github I went ahead and added it <a href="https://github.com/zacg/MvcJqGrid">https://github.com/zacg/MvcJqGrid</a>. 
</p>




<p>
The syntax follows the exisitng MvcJqGrid builder pattern and is very straightforward:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="err">@</span><span class="p">(</span><span class="n">Html</span><span class="p">.</span><span class="n">Grid</span><span class="p">(</span><span class="s">&quot;editing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetCaption</span><span class="p">(</span><span class="s">&quot;Inline Editing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;CustomerId&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetLabel</span><span class="p">(</span><span class="s">&quot;Id&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetCustomFormatter</span><span class="p">(</span><span class="s">&quot;buttonize&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="n">Formatters</span><span class="p">.</span><span class="n">Email</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">EditType</span><span class="p">.</span><span class="n">Text</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Company&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">MvcJqGrid</span><span class="p">.</span><span class="n">Enums</span><span class="p">.</span><span class="n">EditType</span><span class="p">.</span><span class="n">Select</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">SetEditOptions</span><span class="p">(</span><span class="k">new</span> <span class="n">EditOptions</span><span class="p">()</span> <span class="p">{</span> <span class="n">Value</span> <span class="p">=</span> <span class="s">&quot;0:Twitter; 1:Google; 2:Microsoft; 3:Cisco&quot;</span> <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;EmailAddress&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="n">Formatters</span><span class="p">.</span><span class="n">Email</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditable</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditType</span><span class="p">(</span><span class="n">EditType</span><span class="p">.</span><span class="n">Text</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SetEditRules</span><span class="p">(</span><span class="k">new</span> <span class="n">EditRules</span><span class="p">()</span> <span class="p">{</span> <span class="n">Email</span> <span class="p">=</span> <span class="k">true</span> <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Last Modified&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AddColumn</span><span class="p">(</span><span class="k">new</span> <span class="n">Column</span><span class="p">(</span><span class="s">&quot;Telephone&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetUrl</span><span class="p">(</span><span class="n">Url</span><span class="p">.</span><span class="n">Action</span><span class="p">(</span><span class="s">&quot;GridDataBasic&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetAutoWidth</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetRowNum</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetRowList</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="m">10</span><span class="p">,</span> <span class="m">15</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">50</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetViewRecords</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetPager</span><span class="p">(</span><span class="s">&quot;pager&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">script</span> <span class="n">type</span><span class="p">=</span><span class="s">&quot;text/javascript&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="n">function</span> <span class="nf">buttonize</span><span class="p">(</span><span class="n">cellvalue</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">rowobject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="err">&#39;</span><span class="p">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="p">=</span><span class="s">&quot;button&quot;</span> <span class="k">value</span><span class="p">=</span><span class="s">&quot;Edit&quot;</span> <span class="n">onclick</span><span class="p">=</span><span class="s">&quot;edit(&#39; + options.rowId + &#39;)&quot;</span><span class="p">&gt;</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">function</span> <span class="nf">edit</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">$</span><span class="p">(</span><span class="s">&quot;#editing&quot;</span><span class="p">).</span><span class="n">jqGrid</span><span class="p">(</span><span class="s">&quot;editRow&quot;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have submitted a pull request for my additions so it will become part of the core library shortly, if you can&#8217;t wait that long just clone my fork here: <a href="https://github.com/zacg/MvcJqGrid">https://github.com/zacg/MvcJqGrid</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setup opencv project with qt creator on linux]]></title>
    <link href="http://zacg.github.io/blog/2013/05/09/configuring-opencv-project-with-qt-creator-on-linux/"/>
    <updated>2013-05-09T02:08:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/09/configuring-opencv-project-with-qt-creator-on-linux</id>
    <content type="html"><![CDATA[<p>The following tutorial will show you how to setup a console project in qt creator for opencv based projects. It assumes you have already installed the opencv library.</p>

<p>If not installed, install qt creator</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get qtcreator
</span></code></pre></td></tr></table></div></figure>


<p>Open qt creator</p>

<p>create a new console application project</p>

<p>Add following lines to .pro file</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INCLUDEPATH +<span class="o">=</span> /usr/local/include/opencv2/
</span><span class='line'>
</span><span class='line'>LIBS +<span class="o">=</span> -L /usr/local/lib/
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_core
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_nonfree
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_imgproc
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_highgui
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_ml
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_video
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_features2d
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_calib3d
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_objdetect
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_contrib
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_legacy
</span><span class='line'>LIBS +<span class="o">=</span> -lopencv_flann
</span><span class='line'>LIBS +<span class="o">=</span> -lboost_system
</span><span class='line'>LIBS +<span class="o">=</span> -lboost_filesystem
</span></code></pre></td></tr></table></div></figure>


<p>By default qt creator will add some message pump related code to your main.cpp file, this can be commented out if you are just writing a console application (leaving it unmodified may prevent you from seeing output in the xterm console window)</p>

<p>If you are using ubuntu you will probably have to configure the x-term environment settings.</p>

<p>Goto: Tools -> options -> environment settings</p>

<p>Set the terminal field to the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/xterm -e
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Opencv xserver error with Eclipse CDE]]></title>
    <link href="http://zacg.github.io/blog/2013/05/05/fixing-opencv-xserver-error-with-cde/"/>
    <updated>2013-05-05T01:57:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/05/fixing-opencv-xserver-error-with-cde</id>
    <content type="html"><![CDATA[<p>When running your first opencv project with CDE you may experience the &#8220;cannot connect to x server&#8221; error when calling code that requires the opencv imageview or UI elements.</p>

<p><img src="http://zacg.github.io/images/content/xhostservererror.png" alt="x server error" /></p>

<br>


<br>


<br>


<p>To fix simply set DISPLAY in your projects environment variables, make sure a file in your project is selected then goto run-> run configurations -> environment and add a display variable like the following:</p>

<p><img src="http://zacg.github.io/images/content/cdeenvvariable.png" alt="x server error" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogs worth reading]]></title>
    <link href="http://zacg.github.io/blog/2013/05/03/blogs-i-recommend/"/>
    <updated>2013-05-03T22:04:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/03/blogs-i-recommend</id>
    <content type="html"><![CDATA[<p>The blogging engine I am using dosen&#8217;t have a &#8220;following&#8221; function so I am using this post to list the blogs I follow, I recommend them when people ask me where I learn various development related topics:</p>

<ul>
<li>
<a href="https://msmvps.com/blogs/jon_skeet/" >John Skeets blog</a>
</li>
<li>
<a href="http://ayende.com/blog" > Ayende Rahien&#8217;s blog</a>
</li>
<li>
<a href="http://tomasp.net/blog" >Tomas Petricek&#8217;s blog</a>
</li>
<li>
<a href="http://trelford.com/blog/" > Phil Trelford&#8217;s blog</a>
</li>
<li>
<a href="http://martinfowler.com/" > Martin Fowler</a>
</li>
<li>
<a href="http://blogs.msdn.com/b/dsyme/" > Don Syme</a>
</li>
<li>
<a href="http://ericlippert.com/" >Eric Lippert</a>
</li>
<li>
<a href="http://computer-vision-talks.com/" > Computer Vision Talks</a>
</li>
<li>
<a href="" ></a>
</li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing opencv 2.4.5 on Ubuntu 12 with Eclipse CDE]]></title>
    <link href="http://zacg.github.io/blog/2013/05/02/installing-opencv-2-dot-4-5-on-ubuntu-12-with-eclipse-cde/"/>
    <updated>2013-05-02T00:45:00-04:00</updated>
    <id>http://zacg.github.io/blog/2013/05/02/installing-opencv-2-dot-4-5-on-ubuntu-12-with-eclipse-cde</id>
    <content type="html"><![CDATA[<p><img src="http://zacg.github.io/images/content/OpenCV_Logo_with_text.png" alt="opencv logo" height="150px" width="150px" />
<img src="http://zacg.github.io/images/content/ubuntu-logo.jpg" alt="ubuntu logo" height="150px" width="150px"/>
<img src="http://zacg.github.io/images/content/eclipse-logo.png" alt="eclipse logo" height="150px" width="150px" /></p>

<p>The following is a brief tutorial on getting the opencv library setup with eclipse CDE on Ubuntu 12. The same eclipse project settings detailed in this tutorial can be re-used to build applicaions on top of opencv.</p>

<ol>
<li>
<span style="line-height: 13px;">
Start by getting things up to date
</span>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get upgrade
</span></code></pre></td></tr></table></div></figure>

</li>

<li>Install opencv dependencies so we can compile the opencv library

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev libtiff4-dev libjasper-dev libopenexr-dev cmake python-dev python-numpy python-tk libtbb-dev libeigen2-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev
</span></code></pre></td></tr></table></div></figure>

</li>

<li>Grab the current stable release of opencv, at the time of this post it was: 2.4.5

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget https://github.com/Itseez/opencv/archive/2.4.5.tar.gz
</span><span class='line'>tar -xvf OpenCV-2.4.5.tar.bz2
</span></code></pre></td></tr></table></div></figure>

</li>

<li>Now we need to build a makefile with cmake if you are just messing around and aren&#8217;t sure which modules to install you can run the following command which will include the most common ones including python bindings. Otherwise you can skip to 4a to select which options you want.

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cmake -D <span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE -D <span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/usr/local
</span><span class='line'>    -D <span class="nv">WITH_TBB</span><span class="o">=</span>ON -D <span class="nv">BUILD_NEW_PYTHON_SUPPORT</span><span class="o">=</span>ON -D <span class="nv">WITH_V4L</span><span class="o">=</span>ON
</span><span class='line'>    -D <span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>ON -D <span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON
</span><span class='line'>    -D <span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON -D <span class="nv">WITH_QT</span><span class="o">=</span>ON -D <span class="nv">WITH_OPENGL</span><span class="o">=</span>ON ..
</span></code></pre></td></tr></table></div></figure>


If you chose the above generic build options continue to step 5.

<ol>


<li>
We will use the cmake gui to select which components to include, start by installing it:

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get cmake-qt-gui
</span><span class='line'>sudo cmake-gui
</span></code></pre></td></tr></table></div></figure>

</li>

<li>A user interface dialog should appear. Select the directory you extraced the opencv source files to for the source directory. Create a new build direcory and select that in the gui as the build destination. Then click the configure button to the lower left, select &#8220;unix make files&#8221; for a generator, and &#8220;use native compilers&#8221; option.

<img src="http://zacg.github.io/images/content/CmakeGui.png" alt="cmake gui" />
</li>

<li>
The configuration process should populate the gui dialog with the available components, tick off desired ones, hover over the right column with the mouse cursor to see a more detailed description.
</li>

<li>
Click generate, cmake should populate the build directory with the necessary make files. Check the output window to ensure there were no errors.
</li>

</ol>
</li>

<li>
 Navigate to your build directory in a terminal and make. Then install.

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>release
</span><span class='line'>make
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>

</li>

<li>
To configure the dynamic linker we need to add a line to the end of ld.so.conf.d. The following command will open the file in a text editor (the file may be blank, that is fine).

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gedit /etc/ld.so.conf.d/opencv.conf
</span></code></pre></td></tr></table></div></figure>


Add the line:

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/lib
</span></code></pre></td></tr></table></div></figure>


and save it.

</li>

<li>
To configure bash.bashrc:


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gedit /etc/bash.bashrc
</span></code></pre></td></tr></table></div></figure>


And add:

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PKG_CONFIG_PATH</span><span class="o">=</span><span class="nv">$PKG_CONFIG_PATH</span>:/usr/local/lib/pkgconfig
</span><span class='line'><span class="nb">export </span>PKG_CONFIG_PATH
</span></code></pre></td></tr></table></div></figure>


</li>

<li>
Logout/restart before moving on to eclipse installation.
</li>

<li>
If you don&#8217;t already have eclipse with cde installed do that first with the following command


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install eclipse eclipse-cdt g++
</span></code></pre></td></tr></table></div></figure>


</li>

<li>
Open eclipse and create a new empty c++ project using the linux GCC toolchain

<img src="http://zacg.github.io/images/content/CdeNewProj.png" alt="cmake gui" />
</li>

<li>
Next we need to add some code to the project so we have something to build/run. I am goint to take the bag of words
example out of the /samples/cpp/ directory of the opencv project. Simple copy/paste the file into your new project.
</li>

<li>
Next we need to tell eclipse what libraries to include with the project and where to find them. Goto project -> properties on the file menu or just right click on the project in the projects pane and click on properties. A dialog should appear, click on C/C++ Build -> settings then click on includes.

Add the following to the include paths list <strong>Noted: if you need to compile projects with the older c++ api, you would replace opencv2 with opencv</strong>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/include/opencv2
</span></code></pre></td></tr></table></div></figure>


Next goto the GC++ Linker tab and add the following to the library search paths list:


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/lib
</span></code></pre></td></tr></table></div></figure>


then add the following libs to the libary list


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>opencv_core
</span><span class='line'>opencv_nonfree
</span><span class='line'>opencv_imgproc
</span><span class='line'>opencv_highgui
</span><span class='line'>opencv_ml
</span><span class='line'>opencv_video
</span><span class='line'>opencv_features2d
</span><span class='line'>opencv_calib3d
</span><span class='line'>opencv_objdetect
</span><span class='line'>opencv_contrib
</span><span class='line'>opencv_legacy
</span><span class='line'>opencv_flann
</span></code></pre></td></tr></table></div></figure>


for other projects you can remove uneceoctopress spell checkingssary libs or add dependent other dependant ones.
</li>


<li>
 
These project settings should now allow you to compile projects referencing opencv. Goto project -> build the project should build. Then run it, if you are using the bag of words example from the samples folder you should see console output similar to the following:



<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>This program shows how to <span class="nb">read </span>in, train on and produce <span class="nb">test </span>results <span class="k">for </span>the PASCAL VOC <span class="o">(</span>Visual Object Challenge<span class="o">)</span> data.
</span><span class='line'>It shows how to use detectors, descriptors and recognition methods
</span><span class='line'>Using OpenCV version %s
</span><span class='line'>2.4.5
</span><span class='line'>Call:
</span><span class='line'>Format:
</span><span class='line'> .//home/zac/dev/workspace2/Test2/Debug/Test2 <span class="o">[</span>VOC path<span class="o">]</span> <span class="o">[</span>result directory<span class="o">]</span>
</span><span class='line'>       or:
</span><span class='line'> .//home/zac/dev/workspace2/Test2/Debug/Test2 <span class="o">[</span>VOC path<span class="o">]</span> <span class="o">[</span>result directory<span class="o">]</span> <span class="o">[</span>feature detector<span class="o">]</span> <span class="o">[</span>descriptor extractor<span class="o">]</span> <span class="o">[</span>descriptor matcher<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Input parameters:
</span><span class='line'><span class="o">[</span>VOC path<span class="o">]</span>             Path to Pascal VOC data <span class="o">(</span>e.g. /home/my/VOCdevkit/VOC2010<span class="o">)</span>. Note: VOC2007-VOC2010 are supported.
</span><span class='line'><span class="o">[</span>result directory<span class="o">]</span>     Path to result diractory. Following folders will be created in <span class="o">[</span>result directory<span class="o">]</span>:
</span><span class='line'>                         bowImageDescriptors - to store image descriptors,
</span><span class='line'>                         svms - to store trained svms,
</span><span class='line'>                         plots - to store files <span class="k">for </span>plots creating.
</span><span class='line'><span class="o">[</span>feature detector<span class="o">]</span>     Feature detector name <span class="o">(</span>e.g. SURF, FAST...<span class="o">)</span> - see createFeatureDetector<span class="o">()</span> <span class="k">function </span>in detectors.cpp
</span><span class='line'>                         Currently 12/2010, this is FAST, STAR, SIFT, SURF, MSER, GFTT, HARRIS
</span><span class='line'><span class="o">[</span>descriptor extractor<span class="o">]</span> Descriptor extractor name <span class="o">(</span>e.g. SURF, SIFT<span class="o">)</span> - see createDescriptorExtractor<span class="o">()</span> <span class="k">function </span>in descriptors.cpp
</span><span class='line'>                         Currently 12/2010, this is SURF, OpponentSIFT, SIFT, OpponentSURF, BRIEF
</span><span class='line'><span class="o">[</span>descriptor matcher<span class="o">]</span>   Descriptor matcher name <span class="o">(</span>e.g. BruteForce<span class="o">)</span> - see createDescriptorMatcher<span class="o">()</span> <span class="k">function </span>in matchers.cpp
</span><span class='line'>                         Currently 12/2010, this is BruteForce, BruteForce-L1, FlannBased, BruteForce-Hamming, BruteForce-HammingLUT
</span></code></pre></td></tr></table></div></figure>



Tip: the bag of words example references each module individually, if you want to quickly
reference all the free modules for tesing just include 


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;opencv.hpp&quot;</span>
</span></code></pre></td></tr></table></div></figure>



</li>


</ol>




<p>
References:
<br>
<a href="http://docs.opencv.org/doc/tutorials/introduction/linux_eclipse/linux_eclipse.html">http://docs.opencv.org/doc/tutorials/introduction/linux_eclipse/linux_eclipse.html</a>

<br>
<a href="http://www.samontab.com/web/2012/06/installing-opencv-2-4-1-ubuntu-12-04-lts/">http://www.samontab.com/web/2012/06/installing-opencv-2-4-1-ubuntu-12-04-lts/</a>


</p>



]]></content>
  </entry>
  
</feed>
